#nullable enable
const Steeltoe.Logging.DynamicLoggerProvider.DefaultCategoryName = "Default" -> string!
const Steeltoe.Logging.DynamicLoggerProvider.DefaultLogLevel = Microsoft.Extensions.Logging.LogLevel.Information -> Microsoft.Extensions.Logging.LogLevel
override Steeltoe.Logging.DynamicLoggerConfiguration.ToString() -> string!
Steeltoe.Logging.DynamicLoggerConfiguration
Steeltoe.Logging.DynamicLoggerConfiguration.CategoryName.get -> string!
Steeltoe.Logging.DynamicLoggerConfiguration.ConfigurationMinLevel.get -> Microsoft.Extensions.Logging.LogLevel?
Steeltoe.Logging.DynamicLoggerConfiguration.DynamicLoggerConfiguration(string! categoryName, Microsoft.Extensions.Logging.LogLevel? configurationMinLevel, Microsoft.Extensions.Logging.LogLevel effectiveMinLevel) -> void
Steeltoe.Logging.DynamicLoggerConfiguration.EffectiveMinLevel.get -> Microsoft.Extensions.Logging.LogLevel
Steeltoe.Logging.DynamicLoggerProvider
Steeltoe.Logging.DynamicLoggerProvider.CreateLogger(string! categoryName) -> Microsoft.Extensions.Logging.ILogger!
Steeltoe.Logging.DynamicLoggerProvider.Dispose() -> void
Steeltoe.Logging.DynamicLoggerProvider.DynamicLoggerProvider(Microsoft.Extensions.Logging.ILoggerProvider! innerLoggerProvider, Steeltoe.Logging.LoggerFilterConfiguration! loggerFilterConfiguration, System.Collections.Generic.IEnumerable<Steeltoe.Logging.IDynamicMessageProcessor!>! messageProcessors) -> void
Steeltoe.Logging.DynamicLoggerProvider.GetFilter(string! categoryName) -> Steeltoe.Logging.LoggerFilter!
Steeltoe.Logging.DynamicLoggerProvider.GetLoggerConfigurations() -> System.Collections.Generic.ICollection<Steeltoe.Logging.DynamicLoggerConfiguration!>!
Steeltoe.Logging.DynamicLoggerProvider.InnerLoggerProvider.get -> Microsoft.Extensions.Logging.ILoggerProvider!
Steeltoe.Logging.DynamicLoggerProvider.MessageProcessors.get -> System.Collections.Generic.ICollection<Steeltoe.Logging.IDynamicMessageProcessor!>!
Steeltoe.Logging.DynamicLoggerProvider.SetLogLevel(string! categoryName, Microsoft.Extensions.Logging.LogLevel? minLevel) -> void
Steeltoe.Logging.IDynamicLoggerProvider
Steeltoe.Logging.IDynamicLoggerProvider.GetLoggerConfigurations() -> System.Collections.Generic.ICollection<Steeltoe.Logging.DynamicLoggerConfiguration!>!
Steeltoe.Logging.IDynamicLoggerProvider.SetLogLevel(string! categoryName, Microsoft.Extensions.Logging.LogLevel? minLevel) -> void
Steeltoe.Logging.IDynamicMessageProcessor
Steeltoe.Logging.IDynamicMessageProcessor.Process(string! message) -> string!
Steeltoe.Logging.LoggerFilter
Steeltoe.Logging.LoggerFilterConfiguration
Steeltoe.Logging.LoggerFilterConfiguration.ConfigurationMinLevels.get -> System.Collections.Generic.IReadOnlyDictionary<string!, Microsoft.Extensions.Logging.LogLevel>!
Steeltoe.Logging.LoggerFilterConfiguration.DefaultFilter.get -> Steeltoe.Logging.LoggerFilter!
Steeltoe.Logging.LoggerFilterConfiguration.EffectiveFilters.get -> System.Collections.Generic.IReadOnlyDictionary<string!, Steeltoe.Logging.LoggerFilter!>!
Steeltoe.Logging.LoggerFilterConfiguration.LoggerFilterConfiguration(System.Collections.Generic.IReadOnlyDictionary<string!, Microsoft.Extensions.Logging.LogLevel>! configurationMinLevels, System.Collections.Generic.IReadOnlyDictionary<string!, Steeltoe.Logging.LoggerFilter!>! effectiveFilters, Steeltoe.Logging.LoggerFilter! defaultFilter) -> void
Steeltoe.Logging.MessageProcessingLogger
Steeltoe.Logging.MessageProcessingLogger.BeginScope<TState>(TState state) -> System.IDisposable?
Steeltoe.Logging.MessageProcessingLogger.ChangeFilter(Steeltoe.Logging.LoggerFilter! filter) -> void
Steeltoe.Logging.MessageProcessingLogger.InnerLogger.get -> Microsoft.Extensions.Logging.ILogger!
Steeltoe.Logging.MessageProcessingLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel logLevel) -> bool
Steeltoe.Logging.MessageProcessingLogger.MessageProcessingLogger(Microsoft.Extensions.Logging.ILogger! innerLogger, Steeltoe.Logging.LoggerFilter! filter, System.Collections.Generic.IEnumerable<Steeltoe.Logging.IDynamicMessageProcessor!>! messageProcessors) -> void
Steeltoe.Logging.MessageProcessingLogger.MessageProcessors.get -> System.Collections.Generic.ICollection<Steeltoe.Logging.IDynamicMessageProcessor!>!
virtual Steeltoe.Logging.DynamicLoggerProvider.CreateMessageProcessingLogger(string! categoryName) -> Steeltoe.Logging.MessageProcessingLogger!
virtual Steeltoe.Logging.DynamicLoggerProvider.Dispose(bool disposing) -> void
virtual Steeltoe.Logging.MessageProcessingLogger.Log<TState>(Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, TState state, System.Exception? exception, System.Func<TState, System.Exception?, string!>! formatter) -> void
