#nullable enable
override Steeltoe.Logging.DynamicLoggerState.ToString() -> string!
Steeltoe.Logging.DynamicLoggerProvider
Steeltoe.Logging.DynamicLoggerProvider.CreateLogger(string! categoryName) -> Microsoft.Extensions.Logging.ILogger!
Steeltoe.Logging.DynamicLoggerProvider.Dispose() -> void
Steeltoe.Logging.DynamicLoggerProvider.DynamicLoggerProvider(Microsoft.Extensions.Logging.ILoggerProvider! innerLoggerProvider, Steeltoe.Logging.LogLevelsConfiguration! logLevelsConfiguration, System.Collections.Generic.IEnumerable<Steeltoe.Logging.IDynamicMessageProcessor!>! messageProcessors) -> void
Steeltoe.Logging.DynamicLoggerProvider.GetFilter(string! categoryName) -> Steeltoe.Logging.LoggerFilter!
Steeltoe.Logging.DynamicLoggerProvider.GetLogLevels() -> System.Collections.Generic.ICollection<Steeltoe.Logging.DynamicLoggerState!>!
Steeltoe.Logging.DynamicLoggerProvider.InnerLoggerProvider.get -> Microsoft.Extensions.Logging.ILoggerProvider!
Steeltoe.Logging.DynamicLoggerProvider.MessageProcessors.get -> System.Collections.Generic.IReadOnlyCollection<Steeltoe.Logging.IDynamicMessageProcessor!>!
Steeltoe.Logging.DynamicLoggerProvider.RefreshConfiguration(Steeltoe.Logging.LogLevelsConfiguration! configuration) -> void
Steeltoe.Logging.DynamicLoggerProvider.SetLogLevel(string! categoryName, Microsoft.Extensions.Logging.LogLevel? minLevel) -> void
Steeltoe.Logging.DynamicLoggerState
Steeltoe.Logging.DynamicLoggerState.BackupMinLevel.get -> Microsoft.Extensions.Logging.LogLevel?
Steeltoe.Logging.DynamicLoggerState.CategoryName.get -> string!
Steeltoe.Logging.DynamicLoggerState.DynamicLoggerState(string! categoryName, Microsoft.Extensions.Logging.LogLevel? backupMinLevel, Microsoft.Extensions.Logging.LogLevel effectiveMinLevel) -> void
Steeltoe.Logging.DynamicLoggerState.EffectiveMinLevel.get -> Microsoft.Extensions.Logging.LogLevel
Steeltoe.Logging.IDynamicLoggerProvider
Steeltoe.Logging.IDynamicLoggerProvider.GetLogLevels() -> System.Collections.Generic.ICollection<Steeltoe.Logging.DynamicLoggerState!>!
Steeltoe.Logging.IDynamicLoggerProvider.RefreshConfiguration(Steeltoe.Logging.LogLevelsConfiguration! configuration) -> void
Steeltoe.Logging.IDynamicLoggerProvider.SetLogLevel(string! categoryName, Microsoft.Extensions.Logging.LogLevel? minLevel) -> void
Steeltoe.Logging.IDynamicMessageProcessor
Steeltoe.Logging.IDynamicMessageProcessor.Process(string! message) -> string!
Steeltoe.Logging.LoggerFilter
Steeltoe.Logging.LogLevelsConfiguration
Steeltoe.Logging.LogLevelsConfiguration.LogLevelsConfiguration(System.Collections.Generic.IReadOnlyDictionary<string!, Microsoft.Extensions.Logging.LogLevel>! minLevelsPerCategory) -> void
Steeltoe.Logging.LogLevelsConfiguration.MinLevelsPerCategory.get -> System.Collections.Generic.IReadOnlyDictionary<string!, Microsoft.Extensions.Logging.LogLevel>!
Steeltoe.Logging.MessageProcessingLogger
Steeltoe.Logging.MessageProcessingLogger.BeginScope<TState>(TState state) -> System.IDisposable?
Steeltoe.Logging.MessageProcessingLogger.ChangeFilter(Steeltoe.Logging.LoggerFilter! filter) -> void
Steeltoe.Logging.MessageProcessingLogger.InnerLogger.get -> Microsoft.Extensions.Logging.ILogger!
Steeltoe.Logging.MessageProcessingLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel logLevel) -> bool
Steeltoe.Logging.MessageProcessingLogger.MessageProcessingLogger(Microsoft.Extensions.Logging.ILogger! innerLogger, Steeltoe.Logging.LoggerFilter! filter, System.Collections.Generic.IEnumerable<Steeltoe.Logging.IDynamicMessageProcessor!>! messageProcessors) -> void
Steeltoe.Logging.MessageProcessingLogger.MessageProcessors.get -> System.Collections.Generic.IReadOnlyCollection<Steeltoe.Logging.IDynamicMessageProcessor!>!
virtual Steeltoe.Logging.DynamicLoggerProvider.CreateMessageProcessingLogger(string! categoryName) -> Steeltoe.Logging.MessageProcessingLogger!
virtual Steeltoe.Logging.DynamicLoggerProvider.Dispose(bool disposing) -> void
virtual Steeltoe.Logging.MessageProcessingLogger.Log<TState>(Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, TState state, System.Exception? exception, System.Func<TState, System.Exception?, string!>! formatter) -> void
