<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Steeltoe.Common.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Steeltoe.Common.Attributes.AssemblyContainsTypeAttribute">
            <summary>
            This abstract attribute can be used to quickly identify assemblies containing desired types
            </summary>
        </member>
        <member name="T:Steeltoe.Common.Converter.IConditionalConverter">
            <summary>
             Allows a converter to conditionally execute based on the types of the source and target
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Converter.IConditionalConverter.Matches(System.Type,System.Type)">
            <summary>
            Can the conversion from source type to target type be performed by this converter
            </summary>
            <param name="sourceType">the type of the source object to convert from</param>
            <param name="targetType">the type of the target object to conver to</param>
            <returns>true if the conversion can be performed</returns>
        </member>
        <member name="T:Steeltoe.Common.Converter.IConditionalGenericConverter">
            <summary>
            A generic converter that may conditionally execute based on the source type and
            target types.
            </summary>
        </member>
        <member name="T:Steeltoe.Common.Converter.IConversionService">
            <summary>
            A service interface for type conversions.
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Converter.IConversionService.CanConvert(System.Type,System.Type)">
            <summary>
            Returns true if objects of the source type can be converted to the target type.
            </summary>
            <param name="sourceType">the type of the source object</param>
            <param name="targetType">the type of the target object</param>
            <returns>returns true if the conversion can be performed</returns>
        </member>
        <member name="M:Steeltoe.Common.Converter.IConversionService.CanBypassConvert(System.Type,System.Type)">
            <summary>
            Determine whether the conversion between source type and destination type can be bypassed.
            </summary>
            <param name="sourceType">the source type</param>
            <param name="targetType">the target type</param>
            <returns>returns true if it can be bypassed</returns>
        </member>
        <member name="M:Steeltoe.Common.Converter.IConversionService.Convert``1(System.Object)">
            <summary>
            Convert the given source to the target
            </summary>
            <typeparam name="T">the target type to convert to</typeparam>
            <param name="source">the source object to convert</param>
            <returns>the converted object</returns>
        </member>
        <member name="M:Steeltoe.Common.Converter.IConversionService.Convert(System.Object,System.Type,System.Type)">
            <summary>
            Convert the given source to the specified target type.
            </summary>
            <param name="source">the object to convert; may be null</param>
            <param name="sourceType">the source objects type</param>
            <param name="targetType">the target type to convert to</param>
            <returns>the converted object</returns>
        </member>
        <member name="T:Steeltoe.Common.Converter.IConverter`2">
            <summary>
            A converter converts from a source object of type S to a target object of type T.
            </summary>
            <typeparam name="S">type of the source object</typeparam>
            <typeparam name="T">type of the target object</typeparam>
        </member>
        <member name="M:Steeltoe.Common.Converter.IConverter`2.Convert(`0)">
            <summary>
            Convert the source object of type S to a target object of type T.
            </summary>
            <param name="source">the source object to convert; can not be null</param>
            <returns>the converted object which must be type T</returns>
        </member>
        <member name="T:Steeltoe.Common.Converter.IConverterRegistry">
            <summary>
            For registering converters with a type conversion system.
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Converter.IConverterRegistry.AddConverter(Steeltoe.Common.Converter.IGenericConverter)">
            <summary>
            Adds a generic converter to this registry
            </summary>
            <param name="converter">the converter to add</param>
        </member>
        <member name="T:Steeltoe.Common.Converter.IGenericConverter">
            <summary>
            Generic converter interface for converting between two or more types
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Converter.IGenericConverter.ConvertibleTypes">
            <summary>
            Gets the source and target types this converter can convert between.
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Converter.IGenericConverter.Convert(System.Object,System.Type,System.Type)">
            <summary>
            Convert the source object to the target type.
            </summary>
            <param name="source">the object to convert; the source can be null</param>
            <param name="sourceType">the type of the source that should be used during the conversion.
            Can be null, and defaults to the type of the source object</param>
            <param name="targetType">the type we are converting to</param>
            <returns>the converted object</returns>
        </member>
        <member name="P:Steeltoe.Common.Discovery.IServiceInstance.ServiceId">
            <summary>
             Gets the service id as register by the DiscoveryClient
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Discovery.IServiceInstance.Host">
            <summary>
            Gets the hostname of the registered ServiceInstance
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Discovery.IServiceInstance.Port">
            <summary>
            Gets the port of the registered ServiceInstance
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Discovery.IServiceInstance.IsSecure">
            <summary>
            Gets a value indicating whether if the port of the registered ServiceInstance is https or not
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Discovery.IServiceInstance.Uri">
            <summary>
            Gets the service uri address
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Discovery.IServiceInstance.Metadata">
            <summary>
             Gets the key value pair metadata associated with the service instance
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Discovery.IServiceInstanceProvider.Description">
            <summary>
            Gets a human readable description of the implementation
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Discovery.IServiceInstanceProvider.Services">
            <summary>
            Gets all known service Ids
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Discovery.IServiceInstanceProvider.GetInstances(System.String)">
            <summary>
            Get all ServiceInstances associated with a particular serviceId
            </summary>
            <param name="serviceId">the serviceId to lookup</param>
            <returns>List of service instances</returns>
        </member>
        <member name="T:Steeltoe.Common.Discovery.IServiceRegistry`1">
            <summary>
            Represents a Service registry (e.g. Consul, etc.)
            </summary>
            <typeparam name="T">a type representing a service instance</typeparam>
        </member>
        <member name="M:Steeltoe.Common.Discovery.IServiceRegistry`1.Register(`0)">
            <summary>
            Register a service instance in the service registry
            </summary>
            <param name="registration">the service instance to register</param>
        </member>
        <member name="M:Steeltoe.Common.Discovery.IServiceRegistry`1.Deregister(`0)">
            <summary>
            Deregister a service instance in the service registry
            </summary>
            <param name="registration">the service instance to register</param>
        </member>
        <member name="M:Steeltoe.Common.Discovery.IServiceRegistry`1.SetStatus(`0,System.String)">
            <summary>
            Update the registration in the service registry with the provided status
            </summary>
            <param name="registration">the registration to update</param>
            <param name="status">the status</param>
        </member>
        <member name="M:Steeltoe.Common.Discovery.IServiceRegistry`1.GetStatus``1(`0)">
            <summary>
            Return the current status of the service registry registration
            </summary>
            <typeparam name="S">the status</typeparam>
            <param name="registration">the service registration to obtain status for</param>
            <returns>the returned status</returns>
        </member>
        <member name="T:Steeltoe.Common.Expression.Internal.IEvaluationContext">
            <summary>
            Expressions are executed in an evaluation context. It is in this context that
            references are resolved when encountered during expression evaluation.
            TODO:  This interface is not complete
            </summary>
        </member>
        <member name="T:Steeltoe.Common.Expression.Internal.IExpression">
            <summary>
            An expression capable of evaluating itself against context objects.
            Encapsulates the details of a previously parsed expression string.
            Provides a common abstraction for expression evaluation.
            TODO:  This interface is not complete
            </summary>
        </member>
        <member name="T:Steeltoe.Common.Expression.Internal.IExpressionParser">
            <summary>
            Parses expression strings into compiled expressions that can be evaluated.
            Supports parsing templates as well as standard expression strings.
            TODO:  This interface is not complete
            </summary>
        </member>
        <member name="T:Steeltoe.Common.Expression.Internal.IParserContext">
            <summary>
            Context that gets passed along a bean definition parsing process,
            encapsulating all relevant configuration as well as state.
            TODO:  This interface is not complete
            </summary>
        </member>
        <member name="T:Steeltoe.Common.Expression.Internal.ITypeConverter">
            <summary>
            A type converter can convert values between different types encountered during expression
            evaluation.
            TODO:  This interface is not complete
            </summary>
        </member>
        <member name="T:Steeltoe.Common.HealthChecks.HealthCheckResult">
            <summary>
            The result of a health check
            </summary>
        </member>
        <member name="P:Steeltoe.Common.HealthChecks.HealthCheckResult.Status">
            <summary>
            Gets or sets the status of the check
            </summary>
            <remarks>Used by HealthMiddleware to determine HTTP Status code</remarks>
        </member>
        <member name="P:Steeltoe.Common.HealthChecks.HealthCheckResult.Description">
            <summary>
            Gets or sets a description of the health check result
            </summary>
            <remarks>Currently only used on check failures</remarks>
        </member>
        <member name="P:Steeltoe.Common.HealthChecks.HealthCheckResult.Details">
            <summary>
            Gets or sets details of the checked item
            </summary>
            <remarks>For parity with Spring Boot, repeat status [with a call to .ToString()] here</remarks>
        </member>
        <member name="T:Steeltoe.Common.HealthChecks.IHealthContributor">
            <summary>
            Implement this interface and add to DI to be included in health checks
            </summary>
        </member>
        <member name="P:Steeltoe.Common.HealthChecks.IHealthContributor.Id">
            <summary>
            Gets an identifier for the type of check being performed
            </summary>
        </member>
        <member name="M:Steeltoe.Common.HealthChecks.IHealthContributor.Health">
            <summary>
            Check the health of a resource
            </summary>
            <returns>The result of checking the health of a resource</returns>
        </member>
        <member name="P:Steeltoe.Common.IApplicationInstanceInfo.ApplicationId">
            <summary>
            Gets a GUID identifying the application
            </summary>
        </member>
        <member name="P:Steeltoe.Common.IApplicationInstanceInfo.ApplicationName">
            <summary>
            Gets the name of the application, as known to the hosting platform
            </summary>
        </member>
        <member name="P:Steeltoe.Common.IApplicationInstanceInfo.Uris">
            <summary>
            Gets the URIs assigned to the app
            </summary>
        </member>
        <member name="P:Steeltoe.Common.IApplicationInstanceInfo.InstanceIndex">
            <summary>
            Gets the index number of the app instance
            </summary>
        </member>
        <member name="P:Steeltoe.Common.IApplicationInstanceInfo.Port">
            <summary>
            Gets the port assigned to the app instance, on which it should listen
            </summary>
        </member>
        <member name="P:Steeltoe.Common.IApplicationInstanceInfo.Version">
            <summary>
            Gets a GUID identifying the application instance
            </summary>
        </member>
        <member name="P:Steeltoe.Common.IApplicationInstanceInfo.DiskLimit">
            <summary>
            Gets the maximum amount of disk available for the app instance
            </summary>
        </member>
        <member name="P:Steeltoe.Common.IApplicationInstanceInfo.MemoryLimit">
            <summary>
            Gets the maximum amount of memory available for the app instance
            </summary>
        </member>
        <member name="P:Steeltoe.Common.IApplicationInstanceInfo.FileDescriptorLimit">
            <summary>
            Gets the maximum amount of file descriptors available to the app instance
            </summary>
        </member>
        <member name="P:Steeltoe.Common.IApplicationInstanceInfo.InternalIP">
            <summary>
            Gets the internal IP address of the container running the app instance instance
            </summary>
        </member>
        <member name="P:Steeltoe.Common.IApplicationInstanceInfo.InstanceIP">
            <summary>
            Gets the external IP address of the host running the app instance
            </summary>
        </member>
        <member name="M:Steeltoe.Common.IApplicationInstanceInfo.ApplicationNameInContext(Steeltoe.Common.SteeltoeComponent,System.String)">
            <summary>
            Gets the name to use to represent the app instance in the context of a given Steeltoe component
            </summary>
            <param name="steeltoeComponent">The Steeltoe component requesting the app's name</param>
            <param name="additionalSearchPath">One additional config key to consider, used as top priority in search</param>
            <returns>The name of the application</returns>
        </member>
        <member name="T:Steeltoe.Common.IApplicationTask">
            <summary>
            A runnable task bundled with the assembly that can be executed on-demand
            </summary>
        </member>
        <member name="P:Steeltoe.Common.IApplicationTask.Name">
            <summary>
            Gets globally unique name for the task
            </summary>
        </member>
        <member name="M:Steeltoe.Common.IApplicationTask.Run">
            <summary>
            Action which to run
            </summary>
        </member>
        <member name="T:Steeltoe.Common.Lifecycle.ILifecycle">
            <summary>
            A common interface defining methods for start/stop lifecycle control
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Lifecycle.ILifecycle.Start">
            <summary>
            Start this component
            </summary>
            <returns>a task to signal completion</returns>
        </member>
        <member name="M:Steeltoe.Common.Lifecycle.ILifecycle.Stop">
            <summary>
            Stop this component
            </summary>
            <returns>a task to signal completion</returns>
        </member>
        <member name="P:Steeltoe.Common.Lifecycle.ILifecycle.IsRunning">
            <summary>
            Gets a value indicating whether gets a value indicating if its running
            </summary>
        </member>
        <member name="T:Steeltoe.Common.Lifecycle.ILifecycleProcessor">
            <summary>
            Interface for processing lifecycle based services.
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Lifecycle.ILifecycleProcessor.Start">
            <summary>
            Start this component
            </summary>
            <returns>a task to signal completion</returns>
        </member>
        <member name="M:Steeltoe.Common.Lifecycle.ILifecycleProcessor.Stop">
            <summary>
            Stop this component
            </summary>
            <returns>a task to signal completion</returns>
        </member>
        <member name="P:Steeltoe.Common.Lifecycle.ILifecycleProcessor.IsRunning">
            <summary>
            Gets a value indicating whether gets a value indicating if its running
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Lifecycle.ILifecycleProcessor.OnRefresh">
            <summary>
            Call to refresh the lifecycle processor
            </summary>
            <returns>a task to signal completion</returns>
        </member>
        <member name="M:Steeltoe.Common.Lifecycle.ILifecycleProcessor.OnClose">
            <summary>
            Call to shutdown the lifecycle processor
            </summary>
            <returns>a task to signal completion</returns>
        </member>
        <member name="T:Steeltoe.Common.Lifecycle.IPhased">
            <summary>
            An interface for objects that participate in a phased lifecycle.
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Lifecycle.IPhased.Phase">
            <summary>
            Gets the phase of this object
            </summary>
        </member>
        <member name="T:Steeltoe.Common.Lifecycle.ISmartLifecycle">
            <summary>
            An extension of the Lifecycle interface that provides auto startup and a call back
            stop action
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Lifecycle.ISmartLifecycle.IsAutoStartup">
            <summary>
            Gets a value indicating whether the auto startup is set for this object
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Lifecycle.ISmartLifecycle.Stop(System.Action)">
            <summary>
            Stop the component and issue the callback when complete
            </summary>
            <param name="callback">the callback action to invoke when complete</param>
            <returns>a task for completion</returns>
        </member>
        <member name="M:Steeltoe.Common.LoadBalancer.ILoadBalancer.ResolveServiceInstanceAsync(System.Uri)">
            <summary>
            Evaluates a URI for a host name that can be resolved into a service instance
            </summary>
            <param name="request">A URI containing a service name that can be resolved into one or more service instances</param>
            <returns>The original URI, with serviceName replaced by the host:port of a service instance</returns>
        </member>
        <member name="M:Steeltoe.Common.LoadBalancer.ILoadBalancer.UpdateStatsAsync(System.Uri,System.Uri,System.TimeSpan,System.Exception)">
            <summary>
            A mechanism for tracking statistics for service instances
            </summary>
            <param name="originalUri">The original request URI</param>
            <param name="resolvedUri">The URI resolved by the load balancer</param>
            <param name="responseTime">The amount of time taken for a remote call to complete</param>
            <param name="exception">Any exception called during calls to a resolved service instance</param>
            <returns>A task</returns>
        </member>
        <member name="T:Steeltoe.Common.Options.CertificateOptions">
            <summary>
            Options for use with platform-provided certificates
            </summary>
        </member>
        <member name="T:Steeltoe.Common.Order.IOrdered">
            <summary>
            An interface that can be implemented by objects that should be orderable.
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Order.IOrdered.Order">
            <summary>
            Gets the order of this object
            </summary>
        </member>
        <member name="T:Steeltoe.Common.Order.IPriorityOrdered">
            <summary>
            Extension of the ordered interface expressing a priority order.
            Order values expressed by these objects come before others.
            </summary>
        </member>
        <member name="T:Steeltoe.Common.Retry.IRecoveryCallback">
            <summary>
            Callback for stateful retry after all tries are exhausted
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Retry.IRecoveryCallback.Recover(Steeltoe.Common.Retry.IRetryContext)">
            <summary>
            The callback that is issued
            </summary>
            <param name="context">the current retry context</param>
            <returns>an object that can be used to replace the callback result that failed</returns>
        </member>
        <member name="T:Steeltoe.Common.Retry.IRecoveryCallback`1">
            <summary>
            Typed callback for stateful retry after all tries are exhausted
            </summary>
            <typeparam name="T">the type returned from callback</typeparam>
        </member>
        <member name="M:Steeltoe.Common.Retry.IRecoveryCallback`1.Recover(Steeltoe.Common.Retry.IRetryContext)">
            <summary>
            The callback that is issued
            </summary>
            <param name="context">the current retry context</param>
            <returns>an object that can be used to replace the callback result that failed</returns>
        </member>
        <member name="T:Steeltoe.Common.Retry.IRetryContext">
            <summary>
            Low-level access to ongoing retry operation. Normally not needed by clients, but can be
            used to alter the course of the retry, e.g.force an early termination.
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Retry.IRetryContext.LastException">
            <summary>
            Gets the last exception that caused the retry
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Retry.IRetryContext.RetryCount">
            <summary>
            Gets the number of retry attempts
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Retry.IRetryContext.Parent">
            <summary>
            Gets the parent context if present
            </summary>
        </member>
        <member name="T:Steeltoe.Common.Retry.IRetryListener">
            <summary>
            Interface for listener that can be used to add behaviour to a retry.
            Implementations of RetryOperations can chose to issue callbacks to an
            interceptor during the retry lifecycle.
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Retry.IRetryListener.Open(Steeltoe.Common.Retry.IRetryContext)">
            <summary>
            Called before the first attempt in a retry.
            </summary>
            <param name="context">the current retry context</param>
            <returns>true if the retry should proceed</returns>
        </member>
        <member name="M:Steeltoe.Common.Retry.IRetryListener.Close(Steeltoe.Common.Retry.IRetryContext,System.Exception)">
            <summary>
            Called after the final attempt (successful or not).
            </summary>
            <param name="context">the current retry context</param>
            <param name="exception">the last exception that was thrown during retry</param>
        </member>
        <member name="M:Steeltoe.Common.Retry.IRetryListener.OnError(Steeltoe.Common.Retry.IRetryContext,System.Exception)">
            <summary>
            Called after every unsuccessful attempt at a retry.
            </summary>
            <param name="context">the current retry context</param>
            <param name="exception">the last exception that was thrown during retry</param>
        </member>
        <member name="T:Steeltoe.Common.Retry.IRetryOperation">
            <summary>
            Defines the basic set of operations to execute operations with configurable retry behaviour.
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Retry.IRetryOperation.Execute``1(System.Func{Steeltoe.Common.Retry.IRetryContext,``0})">
            <summary>
            Execute the supplied RetryCallback with the configured retry semantics.
            </summary>
            <typeparam name="T">the type of return value</typeparam>
            <param name="retryCallback">the callback</param>
            <returns>result of operation</returns>
        </member>
        <member name="M:Steeltoe.Common.Retry.IRetryOperation.Execute``1(System.Func{Steeltoe.Common.Retry.IRetryContext,``0},Steeltoe.Common.Retry.IRecoveryCallback{``0})">
            <summary>
            Execute the supplied RetryCallback with the configured retry semantics. When retry
            is exhausted, call the recoverycallback
            </summary>
            <typeparam name="T">the type of return value</typeparam>
            <param name="retryCallback">the callback</param>
            <param name="recoveryCallback">the callback after retries are exhausted</param>
            <returns>result of the operation</returns>
        </member>
        <member name="M:Steeltoe.Common.Retry.IRetryOperation.Execute``1(System.Func{Steeltoe.Common.Retry.IRetryContext,``0},System.Func{Steeltoe.Common.Retry.IRetryContext,``0})">
            <summary>
            Execute the supplied RetryCallback with the configured retry semantics. When retry
            is exhausted, call the recoverycallback
            </summary>
            <typeparam name="T">the type of return value</typeparam>
            <param name="retryCallback">the callback</param>
            <param name="recoveryCallback">the callback after retries are exhausted</param>
            <returns>result of the operation</returns>
        </member>
        <member name="M:Steeltoe.Common.Retry.IRetryOperation.Execute(System.Action{Steeltoe.Common.Retry.IRetryContext})">
            <summary>
            Execute the supplied RetryCallback with the configured retry semantics.
            </summary>
            <param name="retryCallback">the callback</param>
        </member>
        <member name="M:Steeltoe.Common.Retry.IRetryOperation.Execute(System.Action{Steeltoe.Common.Retry.IRetryContext},Steeltoe.Common.Retry.IRecoveryCallback)">
            <summary>
            Execute the supplied RetryCallback with the configured retry semantics. When retry
            is exhausted, call the recoverycallback
            </summary>
            <param name="retryCallback">the callback</param>
            <param name="recoveryCallback">the callback after retries are exhausted</param>
        </member>
        <member name="M:Steeltoe.Common.Retry.IRetryOperation.Execute(System.Action{Steeltoe.Common.Retry.IRetryContext},System.Action{Steeltoe.Common.Retry.IRetryContext})">
            <summary>
            Execute the supplied RetryCallback with the configured retry semantics. When retry
            is exhausted, call the recoverycallback
            </summary>
            <param name="retryCallback">the callback</param>
            <param name="recoveryCallback">the callback after retries are exhausted</param>
        </member>
        <member name="M:Steeltoe.Common.Transaction.IResourceHolder.Reset">
            <summary>
            Reset the transactional state
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Transaction.IResourceHolder.Unbound">
            <summary>
            Notify holder that it has been unbound from transaction
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Transaction.IResourceHolder.IsVoid">
            <summary>
            Gets a value indicating whether this holder is considered void, leftover from previous thread
            </summary>
        </member>
        <member name="T:Steeltoe.Common.Util.IAsyncRunnable">
            <summary>
            An object that can be invoked asynchronously via a run method.
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Util.IAsyncRunnable.Run">
            <summary>
            Run this component.
            </summary>
            <returns>return a task to signal completion</returns>
        </member>
        <member name="T:Steeltoe.Common.Util.IRunnable">
            <summary>
            An object that can be invoked synchronously via a run method.
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Util.IRunnable.Run">
            <summary>
            Run this object
            </summary>
            <returns>returns success or failure</returns>
        </member>
    </members>
</doc>
