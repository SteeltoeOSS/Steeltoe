<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Steeltoe.Extensions.Logging.Abstractions</name>
    </assembly>
    <members>
        <member name="M:Steeltoe.Extensions.Logging.DynamicLoggerConfiguration.#ctor(System.String,System.Nullable{Microsoft.Extensions.Logging.LogLevel},Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Steeltoe.Extensions.Logging.DynamicLoggerConfiguration"/> class.
            </summary>
            <param name="name">Namespace</param>
            <param name="configured">Original log level</param>
            <param name="effective">Currently effective log level</param>
        </member>
        <member name="P:Steeltoe.Extensions.Logging.DynamicLoggerConfiguration.Name">
            <summary>
            Gets namespace this configuration is applied to
            </summary>
        </member>
        <member name="P:Steeltoe.Extensions.Logging.DynamicLoggerConfiguration.ConfiguredLevel">
            <summary>
            Gets level from base app configuration (if present)
            </summary>
        </member>
        <member name="P:Steeltoe.Extensions.Logging.DynamicLoggerConfiguration.EffectiveLevel">
            <summary>
            Gets running level of the logger
            </summary>
        </member>
        <member name="M:Steeltoe.Extensions.Logging.DynamicLoggerProviderBase.#ctor(System.Func{Microsoft.Extensions.Logging.ILoggerProvider},Steeltoe.Extensions.Logging.InitialLevels,System.Collections.Generic.IEnumerable{Steeltoe.Extensions.Logging.IDynamicMessageProcessor})">
            <summary>
            Initializes a new instance of the <see cref="T:Steeltoe.Extensions.Logging.DynamicLoggerProviderBase"/> class.
            Contains base functionality for DynamicLoggerProvider.
            </summary>
            <param name="getDelegateLogger">Function to a delegate Logger</param>
            <param name="initialLevels">Set the initialial filter levels</param>
            <param name="messageProcessors">Any <see cref="T:Steeltoe.Extensions.Logging.IDynamicMessageProcessor" /> Messageprocesors </param>
        </member>
        <member name="M:Steeltoe.Extensions.Logging.DynamicLoggerProviderBase.CreateLogger(System.String)">
            <summary>
            Create or retrieve an instance of an ILogger
            </summary>
            <param name="categoryName">Class name that will be using the logger</param>
            <returns>A logger with level filtering for a given class</returns>
        </member>
        <member name="M:Steeltoe.Extensions.Logging.DynamicLoggerProviderBase.GetLoggerConfigurations">
            <summary>
            Get a list of logger configurations
            </summary>
            <returns>Namespaces and loggers with minimum log levels</returns>
        </member>
        <member name="M:Steeltoe.Extensions.Logging.DynamicLoggerProviderBase.SetLogLevel(System.String,System.Nullable{Microsoft.Extensions.Logging.LogLevel})">
            <summary>
            Sets minimum log level for a given category and its decendants - resets to configured value if level is null
            </summary>
            <param name="category">Namespace/qualified class name</param>
            <param name="level">Minimum level to log, pass null to reset</param>
        </member>
        <member name="M:Steeltoe.Extensions.Logging.DynamicLoggerProviderBase.GetFilter(System.String)">
            <summary>
            Get or create the most applicable logging filter
            </summary>
            <param name="name">Fully qualified logger name</param>
            <returns>A filter function for log level</returns>
        </member>
        <member name="M:Steeltoe.Extensions.Logging.DynamicLoggerProviderBase.GetEffectiveLevel(System.String)">
            <summary>
            Determine the level a logger is set to log at right now
            </summary>
            <param name="name">Namespace/qualified class name</param>
            <returns>Minimum logging level</returns>
        </member>
        <member name="M:Steeltoe.Extensions.Logging.DynamicLoggerProviderBase.GetLogLevelFromFilter(System.String,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})">
            <summary>
            Converts a filter function to a LogLevel
            </summary>
            <param name="category">Namespace/class to check</param>
            <param name="filter">Function to evaluate</param>
            <returns>Minimum log level to be logged by this category of logger</returns>
        </member>
        <member name="M:Steeltoe.Extensions.Logging.DynamicLoggerProviderBase.GetKeyPrefixes(System.String)">
            <summary>
            Get parent namespaces
            </summary>
            <param name="name">Fully namespaced class name</param>
            <returns>List of parental namespaces</returns>
        </member>
        <member name="M:Steeltoe.Extensions.Logging.DynamicLoggerProviderBase.GetConfiguredLevel(System.String)">
            <summary>
            Get the log level that was configured when the app started
            </summary>
            <param name="name">Namespace/qualified class name</param>
            <returns>Log level from default filter, value from settings or else null</returns>
        </member>
        <member name="M:Steeltoe.Extensions.Logging.IDynamicLoggerProvider.GetLoggerConfigurations">
            <summary>
            Get a list of all known namespaces and loggers
            </summary>
            <returns>A collection of all known namespaces and loggers with their configurations</returns>
        </member>
        <member name="M:Steeltoe.Extensions.Logging.IDynamicLoggerProvider.SetLogLevel(System.String,System.Nullable{Microsoft.Extensions.Logging.LogLevel})">
            <summary>
            Set the logging threshold for a logger
            </summary>
            <param name="category">A namespace or fully qualified logger name to adjust</param>
            <param name="level">The minimum level that should be logged</param>
        </member>
        <member name="T:Steeltoe.Extensions.Logging.IDynamicMessageProcessor">
            <summary>
            Provides the ability to process each log message before it is sent to the Console
            </summary>
        </member>
        <member name="M:Steeltoe.Extensions.Logging.IDynamicMessageProcessor.Process(System.String)">
            <summary>
            Called for each log message just after the parameters have been formatted into the log string
            but before the time stamp, category, and level have been applied.
            </summary>
            <param name="inputLogMessage">The incoming log message</param>
            <returns>The updated log message</returns>
        </member>
        <member name="T:Steeltoe.Extensions.Logging.InitialLevels">
            <summary>
            Initial set of LogLevels, Filters and DefaultFilter to initialize a <see cref="T:Steeltoe.Extensions.Logging.IDynamicLoggerProvider"/>
            </summary>
        </member>
        <member name="P:Steeltoe.Extensions.Logging.InitialLevels.OriginalLevels">
            <summary>
            Gets or sets the a list of log levels by namespace
            </summary>
        </member>
        <member name="P:Steeltoe.Extensions.Logging.InitialLevels.RunningLevelFilters">
            <summary>
            Gets or sets the filters used to determine whether log entries will be logged
            </summary>
        </member>
        <member name="P:Steeltoe.Extensions.Logging.InitialLevels.DefaultLevelFilter">
            <summary>
            Gets or sets the filter to be used for any category that does not have a specified filter
            </summary>
        </member>
        <member name="M:Steeltoe.Extensions.Logging.MessageProcessingLogger.#ctor(Microsoft.Extensions.Logging.ILogger,System.Collections.Generic.IEnumerable{Steeltoe.Extensions.Logging.IDynamicMessageProcessor})">
            <summary>
            Initializes a new instance of the <see cref="T:Steeltoe.Extensions.Logging.MessageProcessingLogger"/> class.
            Wraps an ILogger and decorates log messages via <see cref="T:Steeltoe.Extensions.Logging.IDynamicMessageProcessor"/>
            </summary>
            <param name="iLogger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> being wrapped</param>
            <param name="messageProcessors">The list of <see cref="T:Steeltoe.Extensions.Logging.IDynamicMessageProcessor"/>s</param>
        </member>
    </members>
</doc>
