<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Steeltoe.Common</name>
    </assembly>
    <members>
        <member name="M:Steeltoe.Common.Availability.ApplicationAvailability.SetAvailabilityState(System.String,Steeltoe.Common.Availability.IAvailabilityState,System.String)">
            <summary>
            Set the availability state for a given availability type
            </summary>
            <param name="stateKey">String name for the type of state to set. See <see cref="F:Steeltoe.Common.Availability.ApplicationAvailability.LivenessKey" /> or <see cref="F:Steeltoe.Common.Availability.ApplicationAvailability.ReadinessKey" /> for convenience</param>
            <param name="newState">The new <see cref="T:Steeltoe.Common.Availability.IAvailabilityState"/></param>
            <param name="caller">Logged at trace level for tracking origin of state change</param>
        </member>
        <member name="T:Steeltoe.Common.Availability.LivenessState">
            <summary>
            "Liveness" state of the application.<para />
            An application is considered live when it's running with a correct internal state.
            "Liveness" failure means that the internal state of the application is broken and we
            cannot recover from it. As a result, the platform should restart the application.
            </summary>
        </member>
        <member name="F:Steeltoe.Common.Availability.LivenessState.Correct">
            <summary>
            The application is running and its internal state is correct.
            </summary>
        </member>
        <member name="F:Steeltoe.Common.Availability.LivenessState.Broken">
            <summary>
            The application is running but its internal state is broken.
            </summary>
        </member>
        <member name="T:Steeltoe.Common.Availability.ReadinessState">
            <summary>
            The Readiness state of the application. <para />
            An application is considered ready when it's <see cref="F:Steeltoe.Common.Availability.LivenessState.Correct" /> and willing to
            accept traffic. "Readiness" failure means that the application is not able to accept
            traffic and that the infrastructure should not route requests to it.
            </summary>
        </member>
        <member name="F:Steeltoe.Common.Availability.ReadinessState.AcceptingTraffic">
            <summary>
            The application is ready to receive traffic.
            </summary>
        </member>
        <member name="F:Steeltoe.Common.Availability.ReadinessState.RefusingTraffic">
            <summary>
            The application is not willing to receive traffic.
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Configuration.ConfigurationValuesHelper.GetSetting(System.String,Microsoft.Extensions.Configuration.IConfiguration,System.String,System.String[])">
            <summary>
            Get setting from config searching the given configPrefix keys in order. Returns the first element with key.
            </summary>
            <param name="key">The key of the element to return.</param>
            <param name="config">IConfiguration to search through.</param>
            <param name="defaultValue">The default Value if no configuration is found.</param>
            <param name="configPrefixes">The prefixes to search for in given order.</param>
            <returns>Config value</returns>
        </member>
        <member name="M:Steeltoe.Common.Configuration.ConfigurationValuesHelper.GetPreferredSetting(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.String[])">
            <summary>
            Get a setting from config by searching the given keys in order. Returns the first match.
            </summary>
            <param name="config">IConfiguration to search through.</param>
            <param name="defaultValue">The default Value if no configuration is found.</param>
            <param name="configKeys">The fully-qualified keys to search for in given order.</param>
            <returns>Value from config or default (if not found)</returns>
        </member>
        <member name="T:Steeltoe.Common.Configuration.PropertyPlaceholderHelper">
            <summary>
            Utility class for working with configuration values that have placeholders in them.
            A placeholder takes the form of <code> ${some:config:reference?default_if_not_present}></code>
            Note: This was "inspired" by the Spring class: PropertyPlaceholderHelper
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Configuration.PropertyPlaceholderHelper.ResolvePlaceholders(System.String,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Replaces all placeholders of the form <code> ${some:config:reference?default_if_not_present}</code>
            with the corresponding value from the supplied <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/>.
            </summary>
            <param name="property">the string containing one or more placeholders</param>
            <param name="config">the configuration used for finding replace values.</param>
            <param name="logger">optional logger</param>
            <returns>the supplied value with the placeholders replaced inline</returns>
        </member>
        <member name="M:Steeltoe.Common.Configuration.PropertyPlaceholderHelper.GetResolvedConfigurationPlaceholders(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger,System.Boolean)">
            <summary>
            Finds all placeholders of the form <code> ${some:config:reference?default_if_not_present}</code>,
            resolves them from other values in the configuration, returns a new list to add to your configuration.
            </summary>
            <param name="config">The configuration to use as both source and target for placeholder resolution.</param>
            <param name="logger">Optional logger</param>
            <param name="useEmptyStringIfNotFound">Replace the placeholder with an empty string, so the application does not see it</param>
            <returns>A list of keys with resolved values. Add to your <see cref="T:Microsoft.Extensions.Configuration.ConfigurationBuilder"/> with method 'AddInMemoryCollection'</returns>
        </member>
        <member name="M:Steeltoe.Common.Discovery.SerializableIServiceInstance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Steeltoe.Common.Discovery.SerializableIServiceInstance"/> class.
            For use with JsonSerializer
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Extensions.UriExtensions.ParseQuerystring(System.String)">
            <summary>
            Parse a querystring into a dictionary of key value pairs
            </summary>
            <param name="querystring">The querystring to parse</param>
            <returns>Pairs of keys and values</returns>
        </member>
        <member name="M:Steeltoe.Common.IServiceCollectionExtensions.RegisterDefaultApplicationInstanceInfo(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Try to register a default instance of <see cref="T:Steeltoe.Common.IApplicationInstanceInfo" />
            </summary>
            <param name="serviceCollection">Collection of configured services</param>
        </member>
        <member name="M:Steeltoe.Common.IServiceCollectionExtensions.GetApplicationInstanceInfo(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            If an instance of <see cref="T:Steeltoe.Common.IApplicationInstanceInfo"/> is found, it is returned.
            Otherwise a default instance is added to the collection and then returned.
            </summary>
            <param name="serviceCollection">Collection of configured services</param>
            <returns>Relevant <see cref="T:Steeltoe.Common.IApplicationInstanceInfo" /></returns>
        </member>
        <member name="M:Steeltoe.Common.IServiceProviderExtensions.GetApplicationInstanceInfo(System.IServiceProvider)">
            <summary>
            If an instance of <see cref="T:Steeltoe.Common.IApplicationInstanceInfo"/> is found, it is returned.
            Otherwise a default instance is returned.
            </summary>
            <param name="sp">Provider of services</param>
            <returns>An instance of <see cref="T:Steeltoe.Common.IApplicationInstanceInfo" /></returns>
        </member>
        <member name="M:Steeltoe.Common.LoadBalancer.RandomLoadBalancer.#ctor(Steeltoe.Common.Discovery.IServiceInstanceProvider,Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Steeltoe.Common.LoadBalancer.RandomLoadBalancer"/> class.
            Returns random service instances, with option caching of service lookups
            </summary>
            <param name="serviceInstanceProvider">Provider of service instance information</param>
            <param name="distributedCache">For caching service instance data</param>
            <param name="cacheEntryOptions">Configuration for cache entries of service instance data</param>
            <param name="logger">For logging</param>
        </member>
        <member name="T:Steeltoe.Common.Logging.UpgradableBootstrapLoggerFactory">
            <summary>
            Allows early utilization of log infrastructure before log config is even read. Any providers spawned are instantly switched over to
            real log providers as the application utilization progresses.
            This class should only be used by components start are invoke before  logging infrastructure is build (prior to service container creation)
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Logging.UpgradableBootstrapLoggerFactory.Update(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Updates existing loggers to use configuration from the supplied config.
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Logging.UpgradableBootstrapLoggerFactory.Update(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Updates existing loggers to use final LoggerFactory as constructed by DI container
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Net.DnsTools.ResolveHostAddress(System.String)">
            <summary>
            Get the first listed <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> for the host name
            </summary>
            <param name="hostName">The host name or address to use</param>
            <returns>String representation of the IP Address or <see langword="null"/></returns>
        </member>
        <member name="P:Steeltoe.Common.Platform.IsContainerized">
            <summary>
            Gets a value indicating whether or not the application appears to be running in a container
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Platform.IsCloudFoundry">
            <summary>
            Gets a value indicating whether or not the platform is Cloud Foundry by checking if VCAP_APPLICATION has been set
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Platform.IsKubernetes">
            <summary>
            Gets a value indicating whether or not the platform is Kubernetes by checking if KUBERNETES_HOST has been set
            </summary>
        </member>
        <member name="P:Steeltoe.Common.Platform.IsCloudHosted">
            <summary>
            Gets a value indicating whether an app is running on a cloud provider. Currently supports Cloud Foundry and Kubernetes
            </summary>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.IsAssemblyLoaded(System.String)">
            <summary>
            Try to load an assembly
            </summary>
            <param name="assembly">Name of the assembly</param>
            <returns>Boolean indicating success/failure of finding the assembly</returns>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.FindAssembly(System.String)">
            <summary>
            Find an assembly
            </summary>
            <param name="name">Name of the assembly to find</param>
            <returns>A representation of the assembly</returns>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.FindAssemblies(System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            Find assemblies matching a query
            </summary>
            <param name="assemblyQuery">Your assembly search query</param>
            <returns>Assemblies in <see cref="P:System.AppDomain.CurrentDomain" /> matching the query</returns>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.FindDescendantTypes(System.Func{System.Reflection.Assembly,System.Boolean},System.Type)">
            <summary>
            Find types from assemblies matching the query that are based on a common type
            </summary>
            <param name="assemblyQuery">Your assembly search query</param>
            <param name="baseType">Base type to search for</param>
            <returns>A list of types that have the given type as a base type</returns>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.FindTypeFromAssemblyAttribute``1">
            <summary>
            Find a type specified in an assembly attribute
            </summary>
            <typeparam name="T">The attribute that defines the type to get</typeparam>
            <returns>A list of matching types. Won't return more than one type per assembly</returns>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.FindAssembliesWithAttribute``1">
            <summary>
            Find a list of types specified in an assembly attribute
            </summary>
            <typeparam name="T">The attribute that defines the types to get</typeparam>
            <returns>A list of matching types</returns>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.FindTypesWithAttribute``1(System.Reflection.Assembly)">
            <summary>
            Finds a list of types with <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Type of <see cref="T:System.Attribute"/> to search for</typeparam>
            <param name="assembly">The assembly to search for the type(s)</param>
            <returns>A list of types with the specified attribute</returns>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.FindTypesWithAttributeFromAssemblyAttribute``2">
            <summary>
            Finds a list of assemblies with <typeparamref name="TTypeAttribute"/> contained within assemblies with <typeparamref name="TAssemblyAttribute"/>
            </summary>
            <typeparam name="TTypeAttribute">The Type attribute to locate</typeparam>
            <typeparam name="TAssemblyAttribute">The Assembly-level attribute to use to filter the assembly list</typeparam>
            <returns>Matching types from within matching assemblies</returns>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.FindAttributedTypesFromAssemblyAttribute``1">
            <summary>
            Finds a list of types with the attributed identified by <typeparamref name="T"/><para></para>
            </summary>
            <typeparam name="T">The assembly attribute that defines the desired type</typeparam>
            <returns>Matching types from within matching assemblies</returns>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.FindInterfacedTypesFromAssemblyAttribute``1">
            <summary>
            Finds a list of types implementing the interface identified by <typeparamref name="TAttribute"/><para></para>
            </summary>
            <typeparam name="TAttribute">The assembly attribute that defines the desired interface type</typeparam>
            <returns>Matching types from within matching assemblies</returns>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.FindType(System.String[],System.String[])">
            <summary>
            Search a list of assemblies for the first matching type
            </summary>
            <param name="assemblyNames">List of assembly names to search</param>
            <param name="typeNames">List of suitable types</param>
            <returns>An appropriate type</returns>
            <remarks>Great for finding an implementation type that could have one or more names in one or more assemblies</remarks>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.FindType(System.Reflection.Assembly,System.String)">
            <summary>
            Find a type from within an assembly
            </summary>
            <param name="assembly">The assembly to search</param>
            <param name="typeName">The name of the type to retrieve</param>
            <returns>The type</returns>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.FindTypeOrThrow(System.String[],System.String[],System.String,System.String)">
            <summary>
            Search a list of assemblies for the first matching type
            </summary>
            <param name="assemblyNames">List of assembly names to search</param>
            <param name="typeNames">List of suitable types</param>
            <param name="typeName">To use in exception</param>
            <param name="assemblyShortDescription">Describe what might be missing</param>
            <returns>An appropriate type</returns>
            <remarks>Great for finding an implementation type that could have one or more names in one or more assemblies</remarks>
            <exception cref="T:System.Exception">When type isn't found</exception>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.FindMethod(System.Type,System.String,System.Type[])">
            <summary>
            Find a method within a type
            </summary>
            <param name="type">The type to search</param>
            <param name="methodName">The name of the method</param>
            <param name="parameters">(Optional) The parameters in the signature</param>
            <returns>The method you're searching for</returns>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.Invoke(System.Reflection.MethodBase,System.Object,System.Object[])">
            <summary>
            Invoke a function
            </summary>
            <param name="member">The method to execute</param>
            <param name="instance">Instance of an object, if required by the method</param>
            <param name="args">Arguments to pass to the method</param>
            <returns>Results of method call</returns>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.CreateInstance(System.Type,System.Object[])">
            <summary>
            Create an instance of a type
            </summary>
            <param name="t">Type to instantiate</param>
            <param name="args">Constructor parameters</param>
            <returns>New instance of desired type</returns>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.TrySetProperty(System.Object,System.String,System.Object)">
            <summary>
            Try to set a property on an object
            </summary>
            <param name="obj">Object to set a value on</param>
            <param name="property">Property to set</param>
            <param name="value">Value to use</param>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.TryLoadAssembliesWithAttribute``1">
            <summary>
            Try to make sure all assemblies with the given attribute have been loaded into the current AppDomain
            </summary>
            <typeparam name="T">Assembly Attribute Type</typeparam>
            <remarks>This method depends on assemblies existing as separate files on disk and will not work for applications published with /p:PublishSingleFile=true</remarks>
        </member>
        <member name="M:Steeltoe.Common.Reflection.ReflectionHelpers.AllRelevantPaths(System.String[],System.Type)">
            <summary>
            Build a list of file paths that are relevant to this task
            </summary>
            <param name="runtimeAssemblies">Paths to dotnet runtime files</param>
            <param name="attributeType">The assembly attribute being searched for</param>
            <returns>A list of paths to the runtime, assembly and requested assembly type</returns>
        </member>
        <member name="T:Steeltoe.Common.SecurityUtilities">
            <summary>
            Helpers for compliance with security scans
            </summary>
        </member>
        <member name="M:Steeltoe.Common.SecurityUtilities.SanitizeInput(System.String)">
            <summary>
            Remove line endings and HTML-encode strings. Useful for logging (potentially) user-entered data
            </summary>
            <param name="inputString">Some string to sanitize</param>
            <returns>HTML-encoded version of original string with CR and LF removed</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ConfigurationServiceInstanceProviderServiceCollectionExtensions.AddConfigurationDiscoveryClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds an IConfiguration-based <see cref="T:Steeltoe.Common.Discovery.IServiceInstanceProvider"/> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </summary>
            <param name="services">Your <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="configuration">Application configuration</param>
            <param name="serviceLifetime">Lifetime of the <see cref="T:Steeltoe.Common.Discovery.IServiceInstanceProvider"/></param>
            <returns>IServiceCollection for chaining</returns>
        </member>
    </members>
</doc>
