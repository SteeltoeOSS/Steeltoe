// This file isn't generated, but this comment is necessary to exclude it from StyleCop analysis.
// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.IO;
using Microsoft.Win32.SafeHandles;

namespace Microsoft.Diagnostics.Runtime;

internal class ContextHelper
{
    [ThreadStatic]
    private static volatile byte[] _context;
    private static int _ipOffset;
    private static int _spOffset;

    public static uint ContextFlags { get { return 0x1003f; } }
    public static byte[] Context { get { Init(); return _context; } }
    public static int InstructionPointerOffset { get { Init(); return _ipOffset; } }
    public static int StackPointerOffset { get { Init(); return _spOffset; } }
    public static uint Length { get { Init(); return (uint)_context.Length; } }

    static void Init()
    {
        if (_context != null)
            return;
            
        if (IntPtr.Size == 4)
        {
            _ipOffset = 184;
            _spOffset = 196;
            _context = new byte[716];
        }
        else
        {
            _ipOffset = 248;
            _spOffset = 152;
            _context = new byte[1232];
        }
    }
}

internal class ReadVirtualStream : Stream
{
    private byte[] _tmp;
    private long _pos;
    private long _disp;
    private long _len;
    private IDataReader _dataReader;

    public ReadVirtualStream(IDataReader dataReader, long displacement, long len)
    {
        _dataReader = dataReader;
        _disp = displacement;
        _len = len;
    }

    public override bool CanRead
    {
        get { return true; }
    }

    public override bool CanSeek
    {
        get { return true; }
    }

    public override bool CanWrite
    {
        get { return true; }
    }

    public override void Flush()
    {
    }

    public override long Length
    {
        get { throw new NotImplementedException(); }
    }

    public override long Position
    {
        get
        {
            return _pos;
        }
        set
        {
            _pos = value;
            if (_pos > _len)
                _pos = _len;
        }
    }

    public override int Read(byte[] buffer, int offset, int count)
    {
        if (offset == 0)
        {
            if (_dataReader.ReadMemory((ulong)(_pos + _disp), buffer, count, out int read))
                return read;

            return 0;
        }
        else
        {
            if (_tmp == null || _tmp.Length < count)
                _tmp = new byte[count];

            if (!_dataReader.ReadMemory((ulong)(_pos + _disp), _tmp, count, out int read))
                return 0;

            Buffer.BlockCopy(_tmp, 0, buffer, offset, read);
            return read;
        }
    }

    public override long Seek(long offset, SeekOrigin origin)
    {
        switch (origin)
        {
            case SeekOrigin.Begin:
                _pos = offset;
                break;

            case SeekOrigin.End:
                _pos = _len + offset;
                if (_pos > _len)
                    _pos = _len;
                break;

            case SeekOrigin.Current:
                _pos += offset;
                if (_pos > _len)
                    _pos = _len;
                break;
        }

        return _pos;
    }

    public override void SetLength(long value)
    {
        _len = value;
    }

    public override void Write(byte[] buffer, int offset, int count)
    {
        throw new InvalidOperationException();
    }
}

#if _TRACING

    class TraceDataReader : IDataReader
    {
        private IDataReader _reader;
        private StreamWriter _file;

        public TraceDataReader(IDataReader reader)
        {
            _reader = reader;
            _file = File.CreateText("datareader.txt");
            _file.AutoFlush = true;
            _file.WriteLine(reader.GetType().ToString());
        }

        public void Close()
        {
            _file.WriteLine("Close");
            _reader.Close();
        }

        public void Flush()
        {
            _file.WriteLine("Flush");
            _reader.Flush();
        }

        public Architecture GetArchitecture()
        {
            var arch = _reader.GetArchitecture();
            _file.WriteLine("GetArchitecture - {0}", arch);
            return arch;
        }

        public uint GetPointerSize()
        {
            var ptrsize = _reader.GetPointerSize();
            _file.WriteLine("GetPointerSize - {0}", ptrsize);
            return ptrsize;
        }

        public IList<ModuleInfo> EnumerateModules()
        {
            var modules = _reader.EnumerateModules();

            int hash = 0;
            foreach (var module in modules)
                hash ^= module.FileName.ToLower().GetHashCode();

            _file.WriteLine("EnumerateModules - {0} {1:x}", modules.Count, hash);
            return modules;
        }

        public void GetVersionInfo(ulong baseAddress, out VersionInfo version)
        {
            _reader.GetVersionInfo(baseAddress, out version);
            _file.WriteLine("GetVersionInfo - {0:x} {1}", baseAddress, version.ToString());
        }

        public bool ReadMemory(ulong address, byte[] buffer, int bytesRequested, out int bytesRead)
        {
            bool result = _reader.ReadMemory(address, buffer, bytesRequested, out bytesRead);

            StringBuilder sb = new StringBuilder();
            int count = bytesRead > 8 ? 8 : bytesRead;
            for (int i = 0; i < count; ++i)
                sb.Append(buffer[i].ToString("x"));

            _file.WriteLine("ReadMemory {0}- {1:x} {2} {3}", result ? "" : "failed ", address, bytesRead, sb.ToString());

            return result;
        }

        public ulong GetThreadTeb(uint thread)
        {
            ulong teb = _reader.GetThreadTeb(thread);
            _file.WriteLine("GetThreadTeb - {0:x} {1:x}", thread, teb);
            return teb;
        }

        public IEnumerable<uint> EnumerateAllThreads()
        {
            List<uint> threads = new List<uint>(_reader.EnumerateAllThreads());

            bool first = true;
            StringBuilder sb = new StringBuilder();
            foreach (uint id in threads)
            {
                if (!first)
                    sb.Append(", ");
                first = false;
                sb.Append(id.ToString("x"));
            }

            _file.WriteLine("Threads: {0} {1}", threads.Count, sb.ToString());
            return threads;
        }

        public bool VirtualQuery(ulong addr, out VirtualQueryData vq)
        {
            bool result = _reader.VirtualQuery(addr, out vq);
            _file.WriteLine("VirtualQuery {0}: {1:x} {2:x} {3}", result ? "" : "failed ", addr, vq.BaseAddress, vq.Size);
            return result;
        }

        public bool GetThreadContext(uint threadID, uint contextFlags, uint contextSize, IntPtr context)
        {
            bool result = _reader.GetThreadContext(threadID, contextFlags, contextSize, context);
            _file.WriteLine("GetThreadContext - {0}", result);
            return result;
        }
    }
#endif


internal unsafe class MemoryReader
{
    #region Variables
    protected ulong _currPageStart;
    protected int _currPageSize;
    protected byte[] _data;
    private byte[] _ptr;
    private byte[] _dword;
    protected IDataReader _dataReader;
    protected int _cacheSize;
    #endregion

    public MemoryReader(IDataReader dataReader, int cacheSize)
    {
        _data = new byte[cacheSize];
        _dataReader = dataReader;
        uint sz = _dataReader.GetPointerSize();
        if (sz != 4 && sz != 8)
            throw new InvalidOperationException("DataReader reported an invalid pointer size.");

        _ptr = new byte[sz];
        _dword = new byte[4];
        _cacheSize = cacheSize;
    }

    public bool ReadDword(ulong addr, out uint value)
    {
        uint size = 4;
        // Is addr on the current page?  If not read the page of memory addr is on.
        // If this fails, we will fall back to a raw read out of the process (which
        // is what MisalignedRead does).
        if ((addr < _currPageStart) || (addr >= _currPageStart + (uint)_currPageSize))
            if (!MoveToPage(addr))
                return MisalignedRead(addr, out value);

        // If MoveToPage succeeds, we MUST be on the right page.
        Debug.Assert(addr >= _currPageStart);

        // However, the amount of data requested may fall off of the page.  In that case,
        // fall back to MisalignedRead.
        ulong offset = addr - _currPageStart;
        if (offset + size > (uint)_currPageSize)
            return MisalignedRead(addr, out value);

        // If we reach here we know we are on the right page of memory in the cache, and
        // that the read won't fall off of the end of the page.
        value = BitConverter.ToUInt32(_data, (int)offset);
        return true;
    }

    public bool ReadDword(ulong addr, out int value)
    {
        bool res = ReadDword(addr, out uint tmp);

        value = (int)tmp;
        return res;
    }

    internal bool TryReadPtr(ulong addr, out ulong value)
    {
        if ((_currPageStart <= addr) && (addr - _currPageStart < (uint)_currPageSize))
        {
            ulong offset = addr - _currPageStart;
            fixed (byte* b = &_data[offset])
                if (_ptr.Length == 4)
                    value = *((uint*)b);
                else
                    value = *((ulong*)b);

            return true;
        }

        return MisalignedRead(addr, out value);
    }

    internal bool TryReadDword(ulong addr, out uint value)
    {
        if ((_currPageStart <= addr) && (addr - _currPageStart < (uint)_currPageSize))
        {
            ulong offset = addr - _currPageStart;
            value = BitConverter.ToUInt32(_data, (int)offset);
            fixed (byte* b = &_data[offset])
                value = *((uint*)b);
            return true;
        }

        return MisalignedRead(addr, out value);
    }

    internal bool TryReadDword(ulong addr, out int value)
    {
        if ((_currPageStart <= addr) && (addr - _currPageStart < (uint)_currPageSize))
        {
            ulong offset = addr - _currPageStart;
            fixed (byte* b = &_data[offset])
                value = *((int*)b);

            return true;
        }

        return MisalignedRead(addr, out value);
    }

    public bool ReadPtr(ulong addr, out ulong value)
    {
        // Is addr on the current page?  If not read the page of memory addr is on.
        // If this fails, we will fall back to a raw read out of the process (which
        // is what MisalignedRead does).
        if ((addr < _currPageStart) || (addr - _currPageStart > (uint)_currPageSize))
            if (!MoveToPage(addr))
                return MisalignedRead(addr, out value);

        // If MoveToPage succeeds, we MUST be on the right page.
        Debug.Assert(addr >= _currPageStart);

        // However, the amount of data requested may fall off of the page.  In that case,
        // fall back to MisalignedRead.
        ulong offset = addr - _currPageStart;
        if (offset + (uint)_ptr.Length > (uint)_currPageSize)
        {
            if (!MoveToPage(addr))
                return MisalignedRead(addr, out value);

            offset = 0;
        }

        // If we reach here we know we are on the right page of memory in the cache, and
        // that the read won't fall off of the end of the page.
        fixed (byte* b = &_data[offset])
            if (_ptr.Length == 4)
                value = *((uint*)b);
            else
                value = *((ulong*)b);

        return true;
    }

    public virtual void EnsureRangeInCache(ulong addr)
    {
        if (!Contains(addr))
            MoveToPage(addr);
    }


    public bool Contains(ulong addr)
    {
        return ((_currPageStart <= addr) && (addr - _currPageStart < (uint)_currPageSize));
    }

    #region Private Functions
    private bool MisalignedRead(ulong addr, out ulong value)
    {
        bool res = _dataReader.ReadMemory(addr, _ptr, _ptr.Length, out _);
        fixed (byte* b = _ptr)
            if (_ptr.Length == 4)
                value = *((uint*)b);
            else
                value = *((ulong*)b);
        return res;
    }

    private bool MisalignedRead(ulong addr, out uint value)
    {
        bool res = _dataReader.ReadMemory(addr, _dword, _dword.Length, out _);
        value = BitConverter.ToUInt32(_dword, 0);
        return res;
    }

    private bool MisalignedRead(ulong addr, out int value)
    {
        bool res = _dataReader.ReadMemory(addr, _dword, _dword.Length, out _);
        value = BitConverter.ToInt32(_dword, 0);
        return res;
    }

    protected virtual bool MoveToPage(ulong addr)
    {
        return ReadMemory(addr);
    }

    protected virtual bool ReadMemory(ulong addr)
    {
        _currPageStart = addr;
        bool res = _dataReader.ReadMemory(_currPageStart, _data, _cacheSize, out _currPageSize);

        if (!res)
        {
            _currPageStart = 0;
            _currPageSize = 0;
        }

        return res;
    }
    #endregion
}
    
internal class GCDesc
{
    private static readonly int s_GCDescSize = IntPtr.Size * 2;

    #region Variables
    private byte[] _data;
    #endregion

    #region Functions
    public GCDesc(byte[] data)
    {
        _data = data;
    }

    public void WalkObject(ulong addr, ulong size, MemoryReader cache, Action<ulong, int> refCallback)
    {
        Debug.Assert(size >= (ulong)IntPtr.Size);

        int series = GetNumSeries();
        int highest = GetHighestSeries();
        int curr = highest;

        if (series > 0)
        {
            int lowest = GetLowestSeries();
            do
            {
                ulong ptr = addr + GetSeriesOffset(curr);
                ulong stop = (ulong)((long)ptr + (long)GetSeriesSize(curr) + (long)size);

                while (ptr < stop)
                {
                    if (cache.ReadPtr(ptr, out ulong ret) && ret != 0)
                        refCallback(ret, (int)(ptr - addr));

                    ptr += (ulong)IntPtr.Size;
                }

                curr -= s_GCDescSize;
            } while (curr >= lowest);
        }
        else
        {
            ulong ptr = addr + GetSeriesOffset(curr);

            while (ptr < (addr + size - (ulong)IntPtr.Size))
            {
                for (int i = 0; i > series; i--)
                {
                    uint nptrs = GetPointers(curr, i);
                    uint skip = GetSkip(curr, i);

                    ulong stop = ptr + (ulong)(nptrs * IntPtr.Size);
                    do
                    {
                        if (cache.ReadPtr(ptr, out ulong ret) && ret != 0)
                            refCallback(ret, (int)(ptr - addr));

                        ptr += (ulong)IntPtr.Size;
                    } while (ptr < stop);

                    ptr += skip;
                }
            }
        }
    }
    #endregion

    #region Private Functions
    private uint GetPointers(int curr, int i)
    {
        int offset = i * IntPtr.Size;
        if (IntPtr.Size == 4)
            return BitConverter.ToUInt16(_data, curr + offset);
        else
            return BitConverter.ToUInt32(_data, curr + offset);
    }

    private uint GetSkip(int curr, int i)
    {
        int offset = i * IntPtr.Size + IntPtr.Size / 2;
        if (IntPtr.Size == 4)
            return BitConverter.ToUInt16(_data, curr + offset);
        else
            return BitConverter.ToUInt32(_data, curr + offset);
    }

    private int GetSeriesSize(int curr)
    {
        if (IntPtr.Size == 4)
            return (int)BitConverter.ToInt32(_data, curr);
        else
            return (int)BitConverter.ToInt64(_data, curr);
    }

    private ulong GetSeriesOffset(int curr)
    {
        ulong offset;
        if (IntPtr.Size == 4)
            offset = BitConverter.ToUInt32(_data, curr + IntPtr.Size);
        else
            offset = BitConverter.ToUInt64(_data, curr + IntPtr.Size);

        return offset;
    }

    private int GetHighestSeries()
    {
        return _data.Length - IntPtr.Size * 3;
    }

    private int GetLowestSeries()
    {
        return _data.Length - ComputeSize(GetNumSeries());
    }

    private static int ComputeSize(int series)
    {
        return IntPtr.Size + series * IntPtr.Size * 2;
    }

    private int GetNumSeries()
    {
        if (IntPtr.Size == 4)
            return (int)BitConverter.ToInt32(_data, _data.Length - IntPtr.Size);
        else
            return (int)BitConverter.ToInt64(_data, _data.Length - IntPtr.Size);
    }
    #endregion
}


internal class NativeMethods
{
    //public static bool LoadNative(string dllName)
    //{
    //    return LoadLibrary(dllName) != IntPtr.Zero;
    //}

    private const string Kernel32LibraryName = "kernel32.dll";

    //public const uint FILE_MAP_READ = 4;

    // Call CloseHandle to clean up.
    //[DllImport(Kernel32LibraryName, SetLastError = true)]
    //public static extern SafeWin32Handle CreateFileMapping(
    //   SafeFileHandle hFile,
    //   IntPtr lpFileMappingAttributes, PageProtection flProtect, uint dwMaximumSizeHigh,
    //   uint dwMaximumSizeLow, string lpName);

    //[DllImport(Kernel32LibraryName, SetLastError = true)]
    //[return: MarshalAs(UnmanagedType.Bool)]
    //public static extern bool UnmapViewOfFile(IntPtr baseAddress);


    //[DllImport(Kernel32LibraryName, SetLastError = true)]
    //public static extern SafeMapViewHandle MapViewOfFile(SafeWin32Handle hFileMappingObject, uint
    //   dwDesiredAccess, uint dwFileOffsetHigh, uint dwFileOffsetLow,
    //   IntPtr dwNumberOfBytesToMap);

    //[DllImportAttribute(Kernel32LibraryName)]
    //public static extern void RtlMoveMemory(IntPtr destination, IntPtr source, IntPtr numberBytes);

    [DllImport(Kernel32LibraryName, SetLastError = true, PreserveSig = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool CloseHandle(IntPtr handle);

    [DllImport(Kernel32LibraryName)]
    [return: MarshalAs(UnmanagedType.Bool)]
    internal static extern bool FreeLibrary(IntPtr hModule);

    public static IntPtr LoadLibrary(string lpFileName)
    {
        return LoadLibraryEx(lpFileName, 0, LoadLibraryFlags.NoFlags);
    }

    [DllImport(Kernel32LibraryName, SetLastError = true)]
    public static extern IntPtr LoadLibraryEx(String fileName, int hFile, LoadLibraryFlags dwFlags);

    [Flags]
    public enum LoadLibraryFlags : uint
    {
        NoFlags = 0x00000000,
        DontResolveDllReferences = 0x00000001,
        LoadIgnoreCodeAuthzLevel = 0x00000010,
        LoadLibraryAsDatafile = 0x00000002,
        LoadLibraryAsDatafileExclusive = 0x00000040,
        LoadLibraryAsImageResource = 0x00000020,
        LoadWithAlteredSearchPath = 0x00000008
    }


    //[Flags]
    //public enum PageProtection : uint
    //{
    //    NoAccess = 0x01,
    //    Readonly = 0x02,
    //    ReadWrite = 0x04,
    //    WriteCopy = 0x08,
    //    Execute = 0x10,
    //    ExecuteRead = 0x20,
    //    ExecuteReadWrite = 0x40,
    //    ExecuteWriteCopy = 0x80,
    //    Guard = 0x100,
    //    NoCache = 0x200,
    //    WriteCombine = 0x400,
    //}

    [DllImport("kernel32.dll")]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool IsWow64Process([In] IntPtr hProcess, [Out] out bool isWow64);

    [DllImport("version.dll")]
    internal static extern bool GetFileVersionInfo(string sFileName, int handle, int size, byte[] infoBuffer);

    [DllImport("version.dll")]
    internal static extern int GetFileVersionInfoSize(string sFileName, out int handle);

    [DllImport("version.dll")]
    internal static extern bool VerQueryValue(byte[] pBlock, string pSubBlock, out IntPtr val, out int len);

    private const int VS_FIXEDFILEINFO_size = 0x34;
    public static short IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 14;
        
    //[DefaultDllImportSearchPaths(DllImportSearchPath.LegacyBehavior)]
    //[DllImport("dbgeng.dll")]
    //internal static extern uint DebugCreate(ref Guid InterfaceId, [MarshalAs(UnmanagedType.IUnknown)] out object Interface);

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    internal delegate int CreateDacInstance([In, ComAliasName("REFIID")] ref Guid riid,
        [In, MarshalAs(UnmanagedType.Interface)] IDacDataTarget data,
        [Out, MarshalAs(UnmanagedType.IUnknown)] out object ppObj);


    [DllImport("kernel32.dll")]
    internal static extern IntPtr GetProcAddress(IntPtr hModule, string procedureName);

    internal static bool IsEqualFileVersion(string file, VersionInfo version)
    {
        if (!GetFileVersion(file, out int major, out int minor, out int revision, out int patch))
            return false;

        return major == version.Major && minor == version.Minor && revision == version.Revision && patch == version.Patch;
    }


    internal static bool GetFileVersion(string dll, out int major, out int minor, out int revision, out int patch)
    {
        major = minor = revision = patch = 0;

        int len = GetFileVersionInfoSize(dll, out int handle);
        if (len <= 0)
            return false;

        byte[] data = new byte[len];
        if (!GetFileVersionInfo(dll, handle, len, data))
            return false;

        if (!VerQueryValue(data, "\\", out IntPtr ptr, out len))
            return false;
            
        byte[] vsFixedInfo = new byte[len];
        Marshal.Copy(ptr, vsFixedInfo, 0, len);

#pragma warning disable CS0618 // Type or member is obsolete
        minor = (ushort)Marshal.ReadInt16(vsFixedInfo, 8);
        major = (ushort)Marshal.ReadInt16(vsFixedInfo, 10);
        patch = (ushort)Marshal.ReadInt16(vsFixedInfo, 12);
        revision = (ushort)Marshal.ReadInt16(vsFixedInfo, 14);
#pragma warning restore CS0618 // Type or member is obsolete

        return true;
    }

    internal static bool TryGetWow64(IntPtr proc, out bool result)
    {
        if (Environment.OSVersion.Version.Major > 5 ||
            (Environment.OSVersion.Version.Major == 5 && Environment.OSVersion.Version.Minor >= 1))
        {
            return IsWow64Process(proc, out result);
        }
        else
        {
            result = false;
            return false;
        }
    }
}

internal sealed class SafeWin32Handle : SafeHandleZeroOrMinusOneIsInvalid
{
    public SafeWin32Handle() : base(true) { }

    public SafeWin32Handle(IntPtr handle)
        : this(handle, true)
    {
    }

    public SafeWin32Handle(IntPtr handle, bool ownsHandle)
        : base(ownsHandle)
    {
        SetHandle(handle);
    }

    protected override bool ReleaseHandle()
    {
        return NativeMethods.CloseHandle(handle);
    }
}

//internal sealed class SafeMapViewHandle : SafeHandleZeroOrMinusOneIsInvalid
//{
//    private SafeMapViewHandle() : base(true) { }

//    protected override bool ReleaseHandle()
//    {
//        return NativeMethods.UnmapViewOfFile(handle);
//    }

//    // This is technically equivalent to DangerousGetHandle, but it's safer for file
//    // mappings. In file mappings, the "handle" is actually a base address that needs
//    // to be used in computations and RVAs.
//    // So provide a safer accessor method.
//    public IntPtr BaseAddress
//    {
//        get
//        {
//            return handle;
//        }
//    }
//}

internal sealed class SafeLoadLibraryHandle : SafeHandleZeroOrMinusOneIsInvalid
{
    private SafeLoadLibraryHandle() : base(true) { }
    public SafeLoadLibraryHandle(IntPtr handle)
        : base(true)
    {
        SetHandle(handle);
    }

    protected override bool ReleaseHandle()
    {
        return NativeMethods.FreeLibrary(handle);
    }

    // This is technically equivalent to DangerousGetHandle, but it's safer for loaded
    // libraries where the HMODULE is also the base address the module is loaded at.
    public IntPtr BaseAddress
    {
        get
        {
            return handle;
        }
    }
}
    
//static class TypeHelpers
//{
//    static internal Guid GetGuid(this Type self)
//    {
//        return self.GUID;
//    }
//}
