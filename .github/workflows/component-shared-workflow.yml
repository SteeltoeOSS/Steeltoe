name: Component Build

on:
  workflow_call:
    inputs:
      component:
        required: true
        type: string
      OS:
        required: true
        type: string
      skipFilter:
        required: false
        type: string
      runConfigServer:
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  pull-requests: write

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: ${{ inputs.OS == 'macOS' && 'false' || '' }}
  SOLUTION_FILE: src/Steeltoe.${{ inputs.component }}.slnf
  COMMON_TEST_ARGS: >-
    --no-build --configuration Release --collect "XPlat Code Coverage" --logger trx --results-directory ${{ github.workspace }}
    --settings coverlet.runsettings --blame-crash --blame-hang-timeout 3m
  SKIP_FILTER_NO_MEMORY_DUMPS: >-
    ${{ inputs.skipFilter && format('--filter "{0}&Category!=MemoryDumps"', inputs.skipFilter) || '--filter "Category!=MemoryDumps"' }}
  SKIP_FILTER_WITH_MEMORY_DUMPS: >-
    ${{ inputs.skipFilter && format('--filter "{0}&Category=MemoryDumps"', inputs.skipFilter) || '--filter "Category=MemoryDumps"' }}

jobs:
  build:
    name: Build and Test
    timeout-minutes: 15
    runs-on: ${{ inputs.OS }}-latest

    services:
      eurekaServer:
        image: ${{ inputs.runConfigServer && 'steeltoe.azurecr.io/eureka-server' || null }}
        ports:
          - 8761:8761
      configServer:
        image: ${{ inputs.runConfigServer && 'steeltoe.azurecr.io/config-server' || null }}
        env:
          eureka.client.enabled: true
          eureka.client.serviceUrl.defaultZone: http://eurekaServer:8761/eureka
          eureka.instance.hostname: localhost
          eureka.instance.instanceId: localhost:configServer:8888
        ports:
          - 8888:8888

    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.*
          9.0.*

    - name: Install Nerdbank.GitVersioning (macOS only)
      if: ${{ inputs.OS == 'macos' }}
      run: dotnet tool install --global nbgv

    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Restore packages
      run: dotnet restore ${{ env.SOLUTION_FILE }} --verbosity minimal

    - name: Set package version
      run: nbgv cloud

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release --verbosity minimal

    - name: Test (net8.0)
      run: dotnet test ${{ env.SOLUTION_FILE }} --framework net8.0 ${{ env.SKIP_FILTER_NO_MEMORY_DUMPS }} ${{ env.COMMON_TEST_ARGS }}

    - name: Test (net8.0) (memory dumps)
      if: ${{ inputs.component == 'Management' }}
      run: dotnet test ${{ env.SOLUTION_FILE }} --framework net8.0 ${{ env.SKIP_FILTER_WITH_MEMORY_DUMPS }} ${{ env.COMMON_TEST_ARGS }}

    - name: Test (net9.0)
      run: dotnet test ${{ env.SOLUTION_FILE }} --framework net9.0 ${{ env.SKIP_FILTER_NO_MEMORY_DUMPS }} ${{ env.COMMON_TEST_ARGS }}

    - name: Test (net9.0) (memory dumps)
      if: ${{ inputs.component == 'Management' }}
      run: dotnet test ${{ env.SOLUTION_FILE }} --framework net9.0 ${{ env.SKIP_FILTER_WITH_MEMORY_DUMPS }} ${{ env.COMMON_TEST_ARGS }}

    - name: Upload hang dumps (on failure)
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: FailedTestOutput-${{ inputs.OS }}
        path: '**/*.dmp'
        if-no-files-found: ignore

    - name: Report test results
      if: ${{ !cancelled() }}
      uses: dorny/test-reporter@v2
      with:
        name: ${{ inputs.OS }} test results
        reporter: dotnet-trx
        path: '**/*.trx'
        fail-on-empty: 'true'
        fail-on-error: 'false'
