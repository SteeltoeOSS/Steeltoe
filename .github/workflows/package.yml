name: Package

on:
  workflow_dispatch:
    inputs:
      deployToDevFeed:
        description: 'Deploy to Dev Feed?'
        required: false
        default: 'false'
        type: choice
        options: [ 'false', 'true' ]
      deployToNuGet:
        description: 'Deploy to NuGet.org?'
        required: false
        default: 'false'
        type: choice
        options: [ 'false', 'true' ]
  push:
    branches:
    - main
    - '[0-9]+.x'
    - 'release/*'
    tags:
      - v*
  pull_request: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  AZURE_ARTIFACTS_FEED_URL: https://pkgs.dev.azure.com/dotnet/Steeltoe/_packaging/dev/nuget/v3/index.json
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: true
  SOLUTION_FILE: 'src/Steeltoe.All.sln'

jobs:
  build:
    name: Build
    timeout-minutes: 15
    runs-on: ubuntu-latest
    outputs:
      sign_packages: ${{ steps.decisions.outputs.sign_packages }}
      deploy_to_dev_feed: ${{ steps.decisions.outputs.deploy_to_dev_feed }}
      deploy_to_nuget_org: ${{ steps.decisions.outputs.deploy_to_nuget_org }}
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.*
          9.0.*

    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Restore packages
      run: dotnet restore ${{ env.SOLUTION_FILE }} --verbosity minimal

    - name: Set package version
      run: nbgv cloud

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release --verbosity minimal

    - name: Collect packages
      run: dotnet pack ${{ env.SOLUTION_FILE }} --no-build --configuration Release --output ${{ github.workspace }}/packages

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: unsigned-packages
        path: ${{ github.workspace }}/packages/**/*.nupkg
        retention-days: 7

    - id: decisions
      name: Make decisions based on workflow triggers
      run: |
        PUSH_TO_MAIN=$([[ "$GITHUB_EVENT_NAME" == "push" && "$GITHUB_REF" == "refs/heads/main" ]] && echo true || echo false)
        PUSH_TAG=$([[ "$GITHUB_EVENT_NAME" == "push" && "$GITHUB_REF" == refs/tags/v* ]] && echo true || echo false)
        DISPATCH_TO_DEV=$([[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" && "${{ github.event.inputs.deployToDevFeed }}" == "true" ]] && echo true || echo false)
        DISPATCH_TO_NUGET=$([[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" && "${{ github.event.inputs.deployToNuGet }}" == "true" ]] && echo true || echo false)

        if [[ "$PUSH_TO_MAIN" == true || "$PUSH_TAG" == true || "$DISPATCH_TO_NUGET" == true ]]; then
          echo "sign_packages=true" >> $GITHUB_OUTPUT
          echo "Packages will be signed"
        else
          echo "sign_packages=false" >> $GITHUB_OUTPUT
          echo "Packages will NOT be signed"
        fi

        if [[ "$DISPATCH_TO_DEV" == true || "$DISPATCH_TO_NUGET" == true || "$PUSH_TO_MAIN" == true || "$PUSH_TAG" == true ]]; then
          echo "deploy_to_dev_feed=$DEPLOY_TO_DEV" >> $GITHUB_OUTPUT
          echo "Packages will be deployed to development feed"
        fi
        if [[ "$DISPATCH_TO_NUGET" == true || "$PUSH_TAG" == true ]]; then
          echo "deploy_to_nuget=$DEPLOY_TO_PROD" >> $GITHUB_OUTPUT
          echo "Packages will be deployed to nuget.org"
        fi

  sign:
    needs: build
    runs-on: windows-latest
    if: needs.build.outputs.sign_packages == 'true'
    environment: Production
    permissions:
      id-token: write

    steps:
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: unsigned-packages
        path: packages

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.*
          9.0.*

    - name: Install code signing tool
      run: dotnet tool install --global sign --prerelease

    - name: Az CLI login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_KEY_VAULT_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_KEY_VAULT_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Sign packages
      shell: pwsh
      run: >-
        sign code azure-key-vault "**/*.nupkg"
        --base-directory "${{ github.workspace }}"
        --azure-key-vault-managed-identity true
        --azure-credential-type "azure-cli"
        --azure-key-vault-url "${{ secrets.AZURE_KEY_VAULT_URL }}"
        --azure-key-vault-certificate "${{ secrets.AZURE_KEY_VAULT_CERTIFICATE_ID }}"
        --description "Steeltoe"

    - name: Upload signed packages
      uses: actions/upload-artifact@v4
      with:
        name: signed-packages
        path: ${{ github.workspace }}/packages/**/*.nupkg

  az-artifacts-deploy-unsigned:
    name: Deploy unsigned packages to Dev Feed
    needs: build
    if: needs.build.outputs.sign_packages != true && needs.build.outputs.deploy_to_dev_feed
    runs-on: ubuntu-latest
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        source-url: ${{ env.AZURE_ARTIFACTS_FEED_URL }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.DEV_FEED_PERSONAL_TOKEN }}

    - name: Download unsigned packages
      uses: actions/download-artifact@v4
      with:
        name: unsigned-packages
        path: packages

    - name: Push unsigned packages to Azure Artifacts
      run: dotnet nuget push packages/*.nupkg --api-key azdo-placeholder --source ${{ env.AZURE_ARTIFACTS_FEED_URL }}

  az-artifacts-deploy-signed:
    name: Deploy signed packages to Dev Feed
    needs: [build, sign]
    if: needs.build.outputs.sign_packages == true && needs.build.outputs.deploy_to_dev_feed
    runs-on: ubuntu-latest
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        source-url: ${{ env.AZURE_ARTIFACTS_FEED_URL }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.DEV_FEED_PERSONAL_TOKEN }}

    - name: Download signed packages
      uses: actions/download-artifact@v4
      with:
        name: signed-packages
        path: packages

    - name: Push signed packages to Azure Artifacts
      run: dotnet nuget push packages/*.nupkg --api-key azdo-placeholder --source ${{ env.AZURE_ARTIFACTS_FEED_URL }}

  nuget-org-deploy:
    name: Deploy to nuget.org
    needs: [build, sign]
    if: needs.build.outputs.deploy_to_nuget_org
    environment: nuget.org
    runs-on: ubuntu-latest
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Download signed packages
      uses: actions/download-artifact@v4
      with:
        name: signed-packages
        path: packages

    - name: Push packages to nuget.org
      run: dotnet nuget push packages/*.nupkg --api-key ${{ secrets.STEELTOE_NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
