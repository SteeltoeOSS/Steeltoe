name: Steeltoe.All

on:
  workflow_dispatch:
  push:
    branches:
    - main
    - '[0-9]+.x'
    - 'release/*'
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: true
  SOLUTION_FILE: 'src/Steeltoe.All.sln'
  COMMON_TEST_ARGS: >-
    --no-build --configuration Release --collect "XPlat Code Coverage" --logger trx --results-directory ${{ github.workspace }}/dumps
    --settings coverlet.runsettings --blame-crash --blame-hang-timeout 3m

jobs:
  analyze:
    name: Build and Test
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
        - os: ubuntu-latest
          runDockerContainers: true
        - os: windows-latest
          skipFilter: Category!=Integration
        - os: macos-latest
          skipFilter: Category!=Integration&Category!=SkipOnMacOS
    runs-on: ${{ matrix.os }}
    continue-on-error: true

    services:
      eurekaServer:
        image: ${{ matrix.runDockerContainers && 'steeltoe.azurecr.io/eureka-server' || null }}
        ports:
        - 8761:8761
      configServer:
        image: ${{ matrix.runDockerContainers && 'steeltoe.azurecr.io/config-server' || null }}
        env:
          eureka.client.enabled: true
          eureka.client.serviceUrl.defaultZone: http://eurekaServer:8761/eureka
          eureka.instance.hostname: localhost
          eureka.instance.instanceId: localhost:configServer:8888
        ports:
        - 8888:8888

    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.*
          9.0.*

    - name: Turn off dev certificate (macOS only)
      if: ${{ matrix.os == 'macos-latest' }}
      # Setting DOTNET_GENERATE_ASPNET_CERTIFICATE to "false" makes it easier to determine which test failed on macOS when it tried to start a web server with https enabled.
      # Without setting this, the following message appears in the logs:
      #   The application is trying to access the ASP.NET Core developer certificate key. A prompt might appear to ask for permission to access the key.
      #   When that happens, select 'Always Allow' to grant 'dotnet' access to the certificate key in the future.
      # and the test run fails, but without indicating which test caused it. By setting this, the causing test fails with the next message:
      #   Unable to configure HTTPS endpoint. No server certificate was specified, and the default developer certificate could not be found or is out of date.
      # To prevent the causing test from failing the test run, disable it on macOS by adding [Trait("Category", "SkipOnMacOS")].
      shell: bash
      run: echo "DOTNET_GENERATE_ASPNET_CERTIFICATE=false" >> $GITHUB_ENV

    - name: Git checkout
      uses: actions/checkout@v4

    - name: Restore packages
      run: dotnet restore ${{ env.SOLUTION_FILE }} --verbosity minimal

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release --verbosity minimal

    - name: Set skip filters for tests
      shell: bash
      run: |
        echo SKIP_FILTER_NO_MEMORY_DUMPS="${{ matrix.skipFilter && format('{0}&Category!=MemoryDumps', matrix.skipFilter) || 'Category!=MemoryDumps' }}" >> $GITHUB_ENV
        echo SKIP_FILTER_WITH_MEMORY_DUMPS="${{ matrix.skipFilter && format('{0}&Category=MemoryDumps', matrix.skipFilter) || 'Category=MemoryDumps' }}" >> $GITHUB_ENV

    - name: Test (net8.0)
      run: dotnet test ${{ env.SOLUTION_FILE }} --framework net8.0 --filter "${{ env.SKIP_FILTER_NO_MEMORY_DUMPS }}" ${{ env.COMMON_TEST_ARGS }}

    - name: Test (net8.0) (memory dumps)
      run: dotnet test ${{ env.SOLUTION_FILE }} --framework net8.0 --filter "${{ env.SKIP_FILTER_WITH_MEMORY_DUMPS }}" ${{ env.COMMON_TEST_ARGS }}

    - name: Test (net9.0)
      run: dotnet test ${{ env.SOLUTION_FILE }} --framework net9.0 --filter "${{ env.SKIP_FILTER_NO_MEMORY_DUMPS }}" ${{ env.COMMON_TEST_ARGS }}

    - name: Test (net9.0) (memory dumps)
      run: dotnet test ${{ env.SOLUTION_FILE }} --framework net9.0 --filter "${{ env.SKIP_FILTER_WITH_MEMORY_DUMPS }}" ${{ env.COMMON_TEST_ARGS }}

    - name: Upload crash/hang dumps (on failure)
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: FailedTestOutput-${{ matrix.os }}
        path: |
          ${{ github.workspace }}/dumps/**/*.dmp
          ${{ github.workspace }}/dumps/**/Sequence_*.xml
        if-no-files-found: ignore

    - name: Report test results
      if: ${{ !cancelled() }}
      uses: dorny/test-reporter@v2
      with:
        name: ${{ matrix.os }} test results
        reporter: dotnet-trx
        path: '**/*.trx'
        fail-on-empty: 'true'
        fail-on-error: 'false'

    - name: Generate code coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@v5
      with:
        reports: '**/coverage.opencover.xml'
        targetdir: 'coveragereport'
        reporttypes: 'MarkdownAssembliesSummary;MarkdownSummaryGithub'
        filefilters: '-*.g.cs'
        title: 'All Code Coverage (${{ matrix.os }})'
        tag: '${{ github.run_number }}_${{ github.run_id }}'

    - name: Add coverage to build summary
      shell: bash
      run: cat coveragereport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY

    - name: Add coverage comment to PR (linux only)
      if: ${{ github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest' }}
      run: gh pr comment $PR_NUMBER --edit-last --create-if-none --body-file coveragereport/Summary.md
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.number }}
