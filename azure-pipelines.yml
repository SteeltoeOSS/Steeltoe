trigger:
  branches:
    include:
    - 2.x
  paths:
    exclude:
    - README.md
    - project-docs/*
    - roadmaps/*
pr:
- 2.x

jobs:
- job:
  variables:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    PackageVersion: $[format('2.5.1-ci{0}', variables['Build.BuildId'])]
    disable.coverage.autogenerate: 'true'
  strategy:
    matrix:
      Linux_Build_and_Test:
        imageName: ubuntu-latest
        skipFilter: '--filter "Category!=Integration&Category!=SkipOnLinux"'
      MacOS_Build_and_Test:
        imageName: macOS-latest
        skipFilter: '--filter "Category!=Integration&Category!=SkipOnMacOS"'
      Windows_Build_Test_and_Package:
        imageName: windows-latest
        skipFilter: '--filter "Category!=Integration"'
  pool:
    vmImage: $(imageName) 
  timeoutInMinutes: 0
  steps:
  - pwsh: |
      if ($env:PackageVersionOverride){
          $env:PackageVersion = $env:PackageVersionOverride
      }
      Write-Host "##vso[build.updatebuildnumber]$env:PackageVersion"
      Write-Host "##vso[task.setvariable variable=PackageVersion;]$env:PackageVersion"
      $prefix = $env:PackageVersion.Split('-')[0]
      $suffix = $env:PackageVersion.Split('-')[1]
      Write-Host "##vso[task.setvariable variable=VersionPrefix;]$prefix"
      Write-Host "##vso[task.setvariable variable=VersionSuffix;]$suffix"
    displayName: Set Build Variables
    env:
      PackageVersion: $(PackageVersion)
      PackageVersionOverride: $(PackageVersionOverride)
  - task: PowerShell@2
    displayName: 'Get GemFire NativeClient assemblies'
    inputs:
      filePath: src/Connectors/EnableGemFire.ps1
      arguments: $(PivNetAPIToken)
  - task: DotNetCoreCLI@2
    displayName: dotnet restore
    inputs:
      command: restore
      projects: src/Steeltoe.All.sln
      feedsToUse: config
      nugetConfigPath: nuget.config
  - task: SonarCloudPrepare@1
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: 'Prepare analysis on SonarCloud'
    inputs:
      SonarCloud: SonarCloud
      organization: 'steeltoeoss'
      projectKey: 'SteeltoeOSS_steeltoe'
      extraProperties: |
        sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)\**\*opencover.xml
        sonar.cs.vstest.reportsPaths=$(Build.SourcesDirectory)\*.trx
        sonar.exclusions=$(Build.SourcesDirectory)\src\Management\src\OpenCensus*
        sonar.coverage.exclusions=**/*Test*/**/*,**/OpenCensus/**,**/OpenCensus.*/**
  - task: DotNetCoreCLI@2
    displayName: dotnet build
    inputs:
      command: build
      projects: src/Steeltoe.All.sln
      arguments: '--no-restore -c $(buildConfiguration) -v n /p:TreatWarningsAsErrors=True /p:VersionPrefix=$(VersionPrefix) /p:VersionSuffix=$(VersionSuffix)'
  - task: DotNetCoreCLI@2
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
    displayName: dotnet test
    inputs:
      command: test
      projects: '**/*.Test/*.csproj'
      arguments: '--blame --no-build -c $(buildConfiguration) -maxcpucount:1 /p:CopyLocalLockFileAssemblies=true $(skipFilter) --collect:"XPlat Code Coverage" --settings coverlet.runsettings --logger trx --results-directory $(Build.SourcesDirectory)'
      publishTestResults: false
  - task: DotNetCoreCLI@2
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: dotnet test
    inputs:
      command: test
      projects: src/Steeltoe.All.sln
      arguments: '--blame --no-build -c $(buildConfiguration) -maxcpucount:1 /p:CopyLocalLockFileAssemblies=true $(skipFilter) --collect:"XPlat Code Coverage" --settings coverlet.runsettings --logger trx --results-directory $(Build.SourcesDirectory)'
      publishTestResults: false
  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '*.trx'
      mergeTestResults: true
  - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Create Code coverage report
    inputs:
      reports: '$(Build.SourcesDirectory)\**\coverage.opencover.xml'
      targetdir: '$(Build.SourcesDirectory)\CodeCoverage'
      reporttypes: 'HtmlInline_AzurePipelines;Cobertura'
  - task: PublishCodeCoverageResults@1
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)\CodeCoverage\Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)\CodeCoverage'
  - bash: bash <(curl -s https://codecov.io/bash)
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: 'Upload to codecov.io'
  - task: SonarCloudAnalyze@1
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Run Code Analysis
  - task: SonarCloudPublish@1
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Publish Quality Gate Result
  - task: DotNetCoreCLI@2
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: dotnet pack
    inputs:
      command: pack
      feedsToUse: select
      packagesToPack: src/Steeltoe.All.sln
      versioningScheme: byEnvVar
      versionEnvVar: PackageVersion
      nobuild: true
  - task: PowerShell@2
    condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')), eq( variables['Agent.OS'], 'Windows_NT' ))
    displayName: Authenticode Sign Packages
    inputs:
      filePath: build/sign-packages.ps1
    env:
      SignClientUser: $(SignClientUser)
      SignClientSecret: $(SignClientSecret)
      ArtifactDirectory: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: Packages
      publishLocation: Container
