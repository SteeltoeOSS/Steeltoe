# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
trigger:
- master

variables:
  BuildConfiguration: 'Debug'
  PackageVersion: $[format('2.2.1-{0}', variables['Build.BuildId'])]
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
#- job: Linux_Build_and_Test
#  pool:
#    vmImage: 'Ubuntu-16.04'
#  steps:
#  - task: DotNetCoreCLI@2
#    inputs:
#      command: build
#      projects: '**/*.sln'
#       arguments: '-c $(buildConfiguration)'
#   - task: DotNetCoreCLI@2
#     inputs:
#       command: test
#       projects: '**/*.Test/*.csproj'
#       arguments: '-c $(buildConfiguration) -f netcoreapp2.1'
# - job: MacOS_Build_and_Test
#   pool:
#     vmImage: 'macOS-10.14'
#   steps:
#   - task: DotNetCoreCLI@2
#     inputs:
#       command: build
#       projects: '**/*.sln'
#       arguments: '-c $(buildConfiguration)'
#   - task: DotNetCoreCLI@2
#     inputs:
#       command: test
#       projects: '**/*.Test/*.csproj'
#       arguments: '-c $(buildConfiguration) -f netcoreapp2.1'
- job: Windows_Build_Test_and_Package
  pool:
    vmImage: 'windows-2019'
  steps:
    - pwsh: |
        Write-Host "##vso[build.addbuildtag]$env:PackageVersion"
      env:
        PackageVersion: $(PackageVersion)
    - task: DotNetCoreCLI@2
      inputs:
        command: 'pack'
        feedsToUse: 'select'
        arguments: '-c $(buildConfiguration)'
        packagesToPack: '**/*.sln'
        versioningScheme: 'byEnvVar'
        versionEnvVar: PackageVersion
    # - task: DotNetCoreCLI@2
    #   inputs:
    #     command: test
    #     projects: '**/*.Test/*.csproj'
    #     arguments: '-c $(buildConfiguration) -f net461'
    - task: PowerShell@2
      displayName: Authenticode Sign Packages
      inputs:
        filePath: build/sign-packages.ps1
      env:
        SignClientUser: $(SignClientUser)
        SignClientSecret: $(SignClientSecret)
        ArtifactDirectory: $(Build.ArtifactStagingDirectory)
      condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')))
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)
        ArtifactName: artifacts
        publishLocation: Container
      condition: always()
