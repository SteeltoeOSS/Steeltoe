# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
trigger:
- master

variables:
  BuildConfiguration: 'Debug'
  PackageVersion: $[format('2.2.1-{0}', variables['Build.BuildId'])]
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
- job: Linux_Build_and_Test
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - task: DotNetCoreCLI@2
    inputs:
      command: build
      projects: '**/*.sln'
      arguments: '-c $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    inputs:
      command: test
      projects: '**/*.Test/*.csproj'
      arguments: '-c $(buildConfiguration)'
- job: MacOS_Build_and_Test
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - task: DotNetCoreCLI@2
    inputs:
      command: build
      projects: '**/*.sln'
      arguments: '-c $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    inputs:
      command: test
      projects: '**/*.Test/*.csproj'
      arguments: '-c $(buildConfiguration)'
- job: Windows_Build_Test_and_Package
  pool:
    vmImage: 'windows-2019'
  steps:
    - pwsh: |
        Write-Host "##vso[build.addbuildtag]$env:PackageVersion"
        Write-Host "##vso[build.updatebuildnumber]$env:PackageVersion"
      env:
        PackageVersion: $(PackageVersion)
    - task: DotNetCoreCLI@2
      inputs:
        command: 'pack'
        feedsToUse: 'select'
        arguments: '-c $(buildConfiguration)'
        packagesToPack: '**/*.sln'
        versioningScheme: 'byEnvVar'
        versionEnvVar: PackageVersion
    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: '**/*.Net4Test/*.csproj'
        arguments: '-c $(buildConfiguration) /p:CollectCoverage=true /p:MergeWith=$(Build.SourcesDirectory)\CodeCoverage\coverage.cobertura.xml /p:CoverletOutputFormat=cobertura /p:Include="[Steeltoe.*]*" /p:Exclude="[*.Test]*"'
    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: '**/*.Test/*.csproj'
        arguments: '-c $(buildConfiguration) /p:CollectCoverage=true /p:MergeWith=$(Build.SourcesDirectory)\CodeCoverage\coverage.cobertura.xml /p:CoverletOutputFormat=cobertura /p:Include="[Steeltoe.*]*" /p:Exclude="[*.Test]*"'
    # Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
    # First install the tool on the machine, then run it
    - script: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:$(Build.SourcesDirectory)\CodeCoverage\coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)\CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
      displayName: Create Code coverage report
      condition: always()
    # Publish the code coverage result (summary and web site)
    # The summary allows to view the coverage percentage in the summary tab
    # The web site allows to view which lines are covered directly in Azure Pipeline
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)\CodeCoverage\Cobertura.xml'
        reportDirectory: '$(Build.SourcesDirectory)\CodeCoverage'
      condition: always()
    - task: PowerShell@2
      displayName: Authenticode Sign Packages
      inputs:
        filePath: build/sign-packages.ps1
      env:
        SignClientUser: $(SignClientUser)
        SignClientSecret: $(SignClientSecret)
        ArtifactDirectory: $(Build.ArtifactStagingDirectory)
      condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')))
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)
        ArtifactName: artifacts
        publishLocation: Container
      condition: always()
