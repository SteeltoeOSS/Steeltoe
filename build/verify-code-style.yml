trigger:
  branches:
    include:
    - main
    - release/*

jobs:
- job: Verify_Code_Style
  variables:
    DOTNET_NOLOGO: true
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
  strategy:
    matrix:
      linux:
        imageName: 'ubuntu-latest'
      mac:
        imageName: 'macOS-latest'
      windows:
        imageName: 'windows-latest'
  pool:
    vmImage: $(imageName)
  steps:
  - task: UseDotNet@2
    displayName: Install .NET 6
    inputs:
      version: 6.0.x
  - task: UseDotNet@2
    displayName: Install .NET 8
    inputs:
      version: 8.0.x
      includePreviewVersions: true
  - task: DotNetCoreCLI@2
    displayName: Install Nerdbank.GitVersioning tool
    condition: eq(variables['imageName'], 'macOS-latest')
    inputs:
      command: custom
      custom: tool
      arguments: install --global nbgv
  - checkout: self
    persistCredentials: true
    fetchDepth: 0
  - task: PowerShell@2
    displayName: Set package version
    inputs:
      targetType: 'inline'
      script: |
        nbgv cloud
  - task: PowerShell@2
    displayName: Restore tools
    inputs:
      targetType: 'inline'
      script: |
        dotnet tool restore
  - task: PowerShell@2
    displayName: Restore packages
    inputs:
      targetType: 'inline'
      script: |
        dotnet restore src
  - task: PowerShell@2
    displayName: Verify code style
    inputs:
      targetType: 'inline'
      script: |
        if (-not $env:SYSTEM_PULLREQUEST_TARGETBRANCH) {
          Write-Output "Running code cleanup on all files in branch."
          dotnet regitlint -s src/Steeltoe.All.sln --print-command --skip-tool-check --jb --dotnetcoresdk=8.0.100-preview.7.23376.3 --jb-profile="Steeltoe Full Cleanup" --jb --properties:Configuration=Release --jb --verbosity=TRACE --jb --LogFolder=$env:BUILD_ARTIFACTSTAGINGDIRECTORY/cleanup-logs --jb --debug --fail-on-diff --print-diff
        }
        else {
          # We are in detached head (the merge result), so there's no need to account for an out-of-date PR.
          $baseCommitHash = git rev-parse origin/$env:SYSTEM_PULLREQUEST_TARGETBRANCH
          if ($LastExitCode -ne 0) { throw "Command 'git rev-parse (1)' failed with exit code $LastExitCode." }
  
          $headCommitHash = git rev-parse HEAD
          if ($LastExitCode -ne 0) { throw "Command 'git rev-parse (2)' failed with exit code $LastExitCode." }
  
          Write-Output "Running code cleanup on commit range $baseCommitHash..$headCommitHash in pull request."
          dotnet regitlint -s src/Steeltoe.All.sln --print-command --skip-tool-check --jb --dotnetcoresdk=8.0.100-preview.7.23376.3 --jb-profile="Steeltoe Full Cleanup" --jb --properties:Configuration=Release --jb --verbosity=TRACE --jb --LogFolder=$env:BUILD_ARTIFACTSTAGINGDIRECTORY/cleanup-logs --jb --debug --fail-on-diff --print-diff -f commits -a $headCommitHash -b $baseCommitHash
        }
  - task: PowerShell@2
    condition: always()
    displayName: Kill hanging processes
    inputs:
      targetType: 'inline'
      script: |
        Get-Process | Where-Object {$_.ProcessName -eq 'dotnet'} | Stop-Process -Force
        Get-Process | Where-Object {$_.ProcessName -eq 'msbuild'} | Stop-Process -Force
        Get-Process | Where-Object {$_.ProcessName -eq 'VBCSCompiler'} | Stop-Process -Force
  - publish: $(Build.ArtifactStagingDirectory)/cleanup-logs
    condition: always()
    displayName: Publish cleanup logs
    artifact: cleanup-logs_$(imageName)
