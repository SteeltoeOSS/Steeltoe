parameters:
  component: ''
  runConfigServer: false
  runRabbitMQ: false
  skipFilter: ''
  OS: ubuntu
  coverletInclude: "[*]*"

jobs:
- job: ${{parameters.component}}_${{parameters.OS}}
  variables:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    SolutionFile: src/${{parameters.component}}/${{parameters.component}}.sln
  pool:
    vmImage: ${{parameters.OS}}-latest
  steps:
  - task: UseDotNet@2
    displayName: Install .NET Core 3.1
    inputs:
      version: 3.1.x
  - task: UseDotNet@2
    displayName: Install .NET 6
    inputs:
      version: 6.0.x
      includePreviewVersions: true
  - task: DotNetCoreCLI@2
    displayName: dotnet restore
    inputs:
      command: restore
      projects: $(SolutionFile)
      feedsToUse: config
      nugetConfigPath: nuget.config
  - task: DotNetCoreCLI@2
    displayName: dotnet build
    inputs:
      command: build
      projects: $(SolutionFile)
      arguments: --no-restore -c Release -v n /p:TreatWarningsAsErrors=True
  - script: docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management
    condition: eq(${{parameters.runRabbitMQ}}, 'true')
    displayName: Start RabbitMQ
  - script: docker run -d --name configserver -p 8888:8888 steeltoeoss/config-server --spring.cloud.config.server.git.default-label=main
    condition: eq(${{parameters.runConfigServer}}, 'true')
    displayName: Start Config Server
  - task: DotNetCoreCLI@2
    displayName: dotnet test
    inputs:
      command: test
      projects: $(SolutionFile)
      arguments: '--no-build -c Release -maxcpucount:1 ${{parameters.skipFilter}} --collect "XPlat Code Coverage" /p:Include=\"${{parameters.coverletInclude}}\" /p:CoverletOutputFormat=opencover /p:DeterministicReport=true /p:UseSourceLink=true'

  - script: |
      docker kill rabbitmq
      docker rm rabbitmq
    condition: eq(${{parameters.runRabbitMQ}}, 'true')
    displayName: Stop RabbitMQ
  - script: |
      docker kill configserver
      docker rm configserver
    condition: eq(${{parameters.runConfigServer}}, 'true')
    displayName: Stop Config Server
  - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
    condition: succeededOrFailed()
    displayName: Consolidate coverage for this job
    inputs:
      reports: $(Agent.TempDirectory)/**/*opencover.xml
      targetdir: $(Build.ArtifactStagingDirectory)/CodeCoverage/$(Agent.JobName)
      reporttypes: Cobertura
  - publish: $(Build.ArtifactStagingDirectory)/CodeCoverage/$(Agent.JobName)
    condition: succeededOrFailed()
    displayName: Publish code coverage artifacts
    artifact: coverageResults-$(Agent.JobName)
